{"file_contents":{"COMPLETE-SETUP.md":{"content":"# Bookie Inventory Management System - Complete Local Setup\n\nThis package contains both the **Web Application** and **React Native Mobile App** for the Bookie Inventory Management System.\n\n## 📦 What's Included\n\n- **Web Application**: React frontend + Express backend\n- **Mobile Application**: React Native app with Expo\n- **Setup Scripts**: Automated installation for both platforms\n- **Documentation**: Complete setup and usage guides\n- **Demo Data**: Ready-to-use sample accounts and data\n\n## 🚀 Quick Start\n\n### 1. Extract the Complete Package\n\n```bash\ntar -xzf bookie-complete-system.tar.gz\ncd bookie-complete-system\n```\n\n### 2. Setup Web Application\n\n```bash\n# Run the web setup script\nchmod +x setup-local.sh\n./setup-local.sh\n\n# Start the web application\nnpm run dev\n```\n\nThe web app will be available at: `http://localhost:5000`\n\n### 3. Setup Mobile Application\n\n```bash\n# Navigate to mobile directory  \ncd mobile\n\n# Install dependencies\nnpm install\n\n# Start Expo development server\nnpx expo start\n```\n\nTest the mobile app by:\n- Installing Expo Go on your phone\n- Scanning the QR code from the terminal\n- Or using `npx expo start --android` / `npx expo start --ios`\n\n## 🔐 Demo Credentials\n\nBoth applications use the same authentication system:\n\n| Role | Username | Password | Access Level |\n|------|----------|----------|--------------|\n| **Bookie** | `admin` | `admin123` | Full system access |\n| **Assistant** | `assistant` | `assistant123` | Limited access |\n\n## 🌐 Web Application Features\n\n### ✅ Complete Feature Set\n- **Landing Page**: Professional marketing page with feature showcase\n- **Authentication**: Secure login with role-based access\n- **Dashboard**: Real-time metrics, recent transactions, key insights\n- **Profile Management**: Uplink and downline contact management\n- **Transaction Tracking**: Automated calculations with commission handling\n- **Ledger System**: Weekly balance calculations and profit/loss reports\n- **Settlement Integration**: WhatsApp message simulation\n- **Custom Reports**: Date range filtering and detailed analytics\n- **User Management**: Role-based access control\n- **Audit Trail**: Complete activity tracking\n\n### 🖥️ Web App Navigation\n```\nLanding Page (/) → Login (/login) → Dashboard (/dashboard)\n├── Profiles (/profiles)\n├── Transactions (/transactions)  \n├── Ledger (/ledger)\n├── Settlement (/settlement)\n├── Reports (/reports)\n├── Users (/users)\n└── Audit Trail (/audit)\n```\n\n## 📱 Mobile Application Features\n\n### ✅ Native Mobile Experience\n- **Welcome Screen**: Feature overview with compelling design\n- **Secure Login**: Same authentication as web app\n- **Dashboard**: Key metrics cards and recent transactions\n- **Profiles**: Uplink/downline management with status indicators\n- **Transactions**: Complete transaction history and creation\n- **Add Transaction**: Real-time calculation with commission handling\n\n### 📱 Mobile App Flow\n```\nWelcome Screen → Login Screen → Dashboard\n├── Profiles Screen\n├── Transactions Screen\n└── Add Transaction Screen\n```\n\n## 🛠️ Technical Architecture\n\n### Web Application Stack\n- **Frontend**: React 18 + TypeScript + Wouter routing\n- **Backend**: Express.js + TypeScript + RESTful API\n- **UI**: Shadcn/ui + Tailwind CSS + Responsive design\n- **State**: TanStack React Query + React Hook Form\n- **Database**: In-memory storage (development) / PostgreSQL (production)\n\n### Mobile Application Stack\n- **Framework**: React Native + Expo SDK\n- **Navigation**: React Navigation 6 with Auth/App stacks\n- **State**: React Context + TanStack React Query\n- **Storage**: Expo Secure Store for token management\n- **UI**: Native components with custom styling\n\n## 📋 Prerequisites\n\n### For Web Application\n- **Node.js 18+**\n- **npm** (comes with Node.js)\n- **PostgreSQL** (optional, for production)\n\n### For Mobile Application\n- **Node.js 18+**\n- **Expo CLI**: `npm install -g @expo/cli`\n- **Expo Go app** on your phone (for testing)\n- **iOS Simulator** or **Android Emulator** (optional)\n\n## 🔧 Detailed Setup Instructions\n\n### Web Application Setup\n\n1. **Install dependencies:**\n   ```bash\n   npm install\n   ```\n\n2. **Environment configuration:**\n   ```bash\n   # .env file is created automatically\n   NODE_ENV=development\n   PORT=5000\n   ```\n\n3. **Start development server:**\n   ```bash\n   npm run dev\n   ```\n\n4. **Access the application:**\n   - Open `http://localhost:5000`\n   - Use demo credentials to login\n\n### Mobile Application Setup\n\n1. **Navigate to mobile directory:**\n   ```bash\n   cd mobile\n   ```\n\n2. **Install Expo CLI globally (if not installed):**\n   ```bash\n   npm install -g @expo/cli\n   ```\n\n3. **Install dependencies:**\n   ```bash\n   npm install\n   ```\n\n4. **Configure API endpoint:**\n   ```bash\n   # Create .env in mobile/ directory\n   echo \"EXPO_PUBLIC_API_URL=http://YOUR_LOCAL_IP:5000/api\" > .env\n   # Replace YOUR_LOCAL_IP with your computer's IP address\n   ```\n\n5. **Start Expo development server:**\n   ```bash\n   npx expo start\n   ```\n\n6. **Test on device:**\n   - Install Expo Go from App Store/Google Play\n   - Scan QR code to run on your phone\n   - Or use simulators: `npx expo start --ios` or `npx expo start --android`\n\n## 🌐 Network Configuration for Mobile\n\nFor the mobile app to communicate with your local web server:\n\n1. **Find your local IP address:**\n   ```bash\n   # On macOS/Linux\n   ifconfig | grep inet\n   \n   # On Windows\n   ipconfig\n   ```\n\n2. **Update mobile environment:**\n   ```bash\n   # In mobile/.env file\n   EXPO_PUBLIC_API_URL=http://192.168.1.100:5000/api\n   ```\n\n3. **Ensure web server accepts external connections:**\n   The web app is configured to bind to `0.0.0.0:5000` for mobile compatibility.\n\n## 📊 Data & Storage\n\n### Development (Default)\n- **Web App**: In-memory storage with sample data\n- **Mobile App**: Connects to web app backend\n- **Data Reset**: All data resets when server restarts\n\n### Production Setup\n- **Database**: PostgreSQL with persistent storage\n- **Configuration**: Update DATABASE_URL in .env\n- **Migrations**: Automatic table creation on startup\n\n## 🧪 Testing & Validation\n\n### Web Application Testing\n1. **Access landing page**: `http://localhost:5000`\n2. **Login functionality**: Use demo credentials\n3. **Navigate sections**: Dashboard, Profiles, Transactions, etc.\n4. **Responsive design**: Test on different screen sizes\n5. **Logout**: Verify session cleanup\n\n### Mobile Application Testing\n1. **Welcome screen**: Feature showcase and navigation\n2. **Login flow**: Same credentials as web app\n3. **Dashboard**: Metrics cards and recent data\n4. **Navigation**: Between all screens\n5. **Transaction creation**: Form validation and calculations\n6. **Logout**: Secure token cleanup\n\n## 🔒 Security Features\n\n### Authentication\n- **Session-based**: Secure login with role validation\n- **Token Storage**: Mobile uses secure storage for tokens\n- **Auto-logout**: Session cleanup on logout\n- **Role-based Access**: Different permissions for Bookie/Assistant\n\n### Data Protection\n- **Input Validation**: Form validation with Zod schemas\n- **XSS Protection**: Sanitized inputs and secure rendering\n- **API Security**: Bearer token authentication\n- **Audit Logging**: Complete activity tracking\n\n## 🚀 Deployment Options\n\n### Web Application\n- **Development**: `npm run dev` (port 5000)\n- **Production**: `npm run build` → `npm start`\n- **Cloud**: Vercel, Railway, DigitalOcean, Heroku\n\n### Mobile Application\n- **Development**: Expo Go app for testing\n- **Production**: Build native binaries for App Store/Google Play\n- **Distribution**: Expo Application Services (EAS)\n\n### Build Commands\n```bash\n# Web production build\nnpm run build\n\n# Mobile production build\ncd mobile\nnpx expo build:ios --release-channel production\nnpx expo build:android --release-channel production\n```\n\n## 🛠️ Troubleshooting\n\n### Common Issues\n\n**Web App - Port already in use:**\n```bash\nnpx kill-port 5000\nnpm run dev\n```\n\n**Web App - Database connection:**\n```bash\n# Check DATABASE_URL in .env\n# Verify PostgreSQL is running (if using database)\n```\n\n**Mobile App - Can't connect to server:**\n```bash\n# Check mobile/.env has correct IP address\n# Ensure web server is running on 0.0.0.0:5000\n# Verify firewall allows connections\n```\n\n**Mobile App - Expo issues:**\n```bash\nnpx expo start --clear\n# Or restart with tunnel: npx expo start --tunnel\n```\n\n**Dependencies issues:**\n```bash\n# Web app\nrm -rf node_modules package-lock.json\nnpm install\n\n# Mobile app  \ncd mobile\nrm -rf node_modules package-lock.json\nnpm install\n```\n\n## 📞 Support\n\n### Development Tips\n1. **Use browser dev tools** for web app debugging\n2. **Check React Native debugger** for mobile issues\n3. **Monitor network requests** for API communication\n4. **Use Expo Dev Tools** for mobile development\n5. **Check server logs** for backend issues\n\n### File Structure\n```\nbookie-complete-system/\n├── client/                 # React web frontend\n├── server/                 # Express backend\n├── shared/                 # Shared TypeScript types\n├── mobile/                 # React Native mobile app\n│   ├── src/screens/       # Mobile app screens\n│   ├── src/utils/         # API client and utilities\n│   └── App.tsx            # Main mobile app component\n├── package.json           # Web app dependencies\n├── setup-local.sh         # Web app setup script\n└── COMPLETE-SETUP.md      # This documentation\n```\n\n## ✅ Success Checklist\n\n### Web Application\n- [ ] Server starts without errors on port 5000\n- [ ] Landing page loads with professional design\n- [ ] Login works with demo credentials\n- [ ] Dashboard shows metrics and recent transactions\n- [ ] All navigation sections are accessible\n- [ ] Responsive design works on mobile browsers\n- [ ] Logout returns to landing page\n\n### Mobile Application\n- [ ] Expo development server starts successfully\n- [ ] Welcome screen displays feature showcase\n- [ ] Login works with same demo credentials\n- [ ] Dashboard shows metrics cards\n- [ ] Navigation between screens works smoothly\n- [ ] Transaction creation form works correctly\n- [ ] Logout clears session and returns to welcome\n\n---\n\n## 🎯 Ready to Use!\n\nYou now have a complete **Bookie Inventory Management System** with:\n- **Professional web application** with full feature set\n- **Native mobile application** for iOS and Android\n- **Comprehensive documentation** for setup and usage\n- **Demo accounts** ready for immediate testing\n- **Production-ready architecture** for scaling\n\nBoth applications work together seamlessly and are ready for immediate use and customization!","size_bytes":10658},"README-LOCAL-SETUP.md":{"content":"# Bookie Inventory Management System - Local Setup\n\nA comprehensive full-stack web application for digitizing and automating bookie inventory management operations.\n\n## 🚀 Quick Start\n\n1. **Extract the backup file:**\n   ```bash\n   tar -xzf bookie-system-backup.tar.gz\n   cd bookie-inventory-system\n   ```\n\n2. **Run the setup script:**\n   ```bash\n   chmod +x setup-local.sh\n   ./setup-local.sh\n   ```\n\n3. **Start the application:**\n   ```bash\n   npm run dev\n   ```\n\n4. **Open your browser:**\n   Navigate to `http://localhost:5000`\n\n5. **Login with demo credentials:**\n   - **Bookie:** `admin` / `admin123` (full access)\n   - **Assistant:** `assistant` / `assistant123` (limited access)\n\n## 📋 Prerequisites\n\n- **Node.js 18+** - [Download here](https://nodejs.org/)\n- **npm** (comes with Node.js)\n- **PostgreSQL** (optional, for production setup)\n\n## 🏗️ Project Structure\n\n```\nbookie-inventory-system/\n├── client/                 # React frontend\n│   ├── src/\n│   │   ├── components/     # Reusable UI components\n│   │   ├── pages/          # Application pages\n│   │   ├── lib/            # Utilities and configurations\n│   │   └── hooks/          # Custom React hooks\n├── server/                 # Express backend\n│   ├── routes.ts           # API routes\n│   ├── storage.ts          # Data storage interface\n│   └── index.ts            # Server entry point\n├── shared/                 # Shared TypeScript types\n│   └── schema.ts           # Database schemas and types\n├── package.json            # Dependencies and scripts\n└── vite.config.ts          # Build configuration\n```\n\n## 🎯 Key Features\n\n- **Dashboard:** Real-time metrics and recent transactions\n- **Profile Management:** Uplink and downline contact management\n- **Transaction Tracking:** Automated calculations with commission handling\n- **Ledger System:** Weekly balance calculations and profit/loss reports\n- **Settlement Integration:** WhatsApp message simulation for settlements\n- **Custom Reports:** Date range filtering and detailed analytics\n- **User Management:** Role-based access control (Bookie/Assistant)\n- **Audit Trail:** Complete activity tracking for compliance\n\n## 🛠️ Development Commands\n\n```bash\n# Install dependencies\nnpm install\n\n# Start development server (frontend + backend)\nnpm run dev\n\n# Build for production\nnpm run build\n\n# Start production server\nnpm start\n```\n\n## 🗄️ Database Setup (Optional)\n\nThe system uses in-memory storage by default. For production with PostgreSQL:\n\n1. **Install PostgreSQL:**\n   - [Windows](https://www.postgresql.org/download/windows/)\n   - [macOS](https://www.postgresql.org/download/macosx/)\n   - [Linux](https://www.postgresql.org/download/linux/)\n\n2. **Create database:**\n   ```sql\n   CREATE DATABASE bookie_db;\n   ```\n\n3. **Update .env file:**\n   ```env\n   DATABASE_URL=postgresql://username:password@localhost:5432/bookie_db\n   ```\n\n4. **Tables will be created automatically** when the app starts.\n\n## 🔧 Configuration\n\n### Environment Variables (.env)\n\n```env\nNODE_ENV=development\nPORT=5000\nDATABASE_URL=postgresql://localhost:5432/bookie_db\n```\n\n### Application Settings\n\n- **Default Port:** 5000\n- **Storage:** In-memory (development) / PostgreSQL (production)\n- **Session Management:** Memory store (can be upgraded to PostgreSQL sessions)\n\n## 🎭 Demo Accounts\n\n| Role | Username | Password | Access Level |\n|------|----------|----------|--------------|\n| Bookie | admin | admin123 | Full system access |\n| Assistant | assistant | assistant123 | Limited access |\n\n## 📱 Responsive Design\n\n- **Desktop:** Full sidebar navigation with all features\n- **Tablet:** Responsive layout with collapsible sidebar\n- **Mobile:** Touch-friendly interface with mobile header\n\n## 🔒 Security Features\n\n- **Authentication:** Session-based login system\n- **Role-based Access:** Different permissions for Bookie and Assistant roles\n- **Audit Logging:** Complete tracking of all user activities\n- **Input Validation:** Form validation using Zod schemas\n- **XSS Protection:** Sanitized inputs and secure rendering\n\n## 🚀 Deployment Options\n\n### Local Development\n- Run `npm run dev` for hot-reload development\n- Access at `http://localhost:5000`\n\n### Production Deployment\n1. Build the application: `npm run build`\n2. Set `NODE_ENV=production` in .env\n3. Start with: `npm start`\n4. Configure reverse proxy (nginx) for production domains\n\n### Cloud Deployment\n- **Vercel:** Frontend deployment with serverless functions\n- **Railway:** Full-stack deployment with PostgreSQL\n- **Heroku:** Container-based deployment\n- **DigitalOcean:** VPS deployment with managed databases\n\n## 📊 Technology Stack\n\n### Frontend\n- **React 18** with TypeScript\n- **Wouter** for routing\n- **TanStack Query** for server state management\n- **React Hook Form** with Zod validation\n- **Shadcn/ui** component library\n- **Tailwind CSS** for styling\n- **Vite** for build tooling\n\n### Backend\n- **Node.js** with Express.js\n- **TypeScript** for type safety\n- **Drizzle ORM** for database operations\n- **Zod** for runtime validation\n- **RESTful API** design\n\n### Database\n- **PostgreSQL** (production)\n- **In-memory storage** (development)\n- **Drizzle Kit** for migrations\n\n## 🔄 Data Flow\n\n1. **User Authentication:** Login with role-based access\n2. **Profile Management:** Create/manage uplinks and downlines\n3. **Transaction Entry:** Record inventory movements with automatic calculations\n4. **Ledger Processing:** Weekly balance calculations and profit/loss tracking\n5. **Settlement Generation:** WhatsApp message creation for weekly settlements\n6. **Reporting:** Custom date range reports with detailed analytics\n7. **Audit Tracking:** Complete activity logging for compliance\n\n## 🆘 Troubleshooting\n\n### Common Issues\n\n**Port already in use:**\n```bash\n# Kill process on port 5000\nnpx kill-port 5000\n```\n\n**Permission issues on setup script:**\n```bash\nchmod +x setup-local.sh\n```\n\n**Node.js version issues:**\n- Install Node.js 18+ from [nodejs.org](https://nodejs.org/)\n- Use nvm to manage multiple Node.js versions\n\n**Database connection errors:**\n- Verify PostgreSQL is running\n- Check DATABASE_URL in .env file\n- Ensure database exists and is accessible\n\n### Development Tips\n\n- Use browser dev tools for debugging\n- Check browser console for JavaScript errors\n- Monitor network tab for API request/response issues\n- Use React Developer Tools for component debugging\n\n## 📞 Support\n\nFor technical support or questions about the system:\n1. Check this README for common solutions\n2. Review browser console for error messages\n3. Verify all prerequisites are installed correctly\n4. Contact your system administrator for deployment-specific issues\n\n## 📄 License\n\nThis project is proprietary software designed for bookie inventory management operations.","size_bytes":6881},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Bookie Inventory Management System\n\n## Overview\n\nThis is a full-stack web application designed to digitize and automate the inventory management process for bookies who trade cricket IDs and other betting inventory. The system replaces manual Excel-based tracking with a centralized digital ledger, automates balance calculations, and provides WhatsApp integration for settlement communications.\n\nThe application manages the flow where bookies take inventory from uplinks (suppliers) at negotiated rates and distribute it to downlines (agents) with their own commission structures. It tracks points, rates, commissions, and automatically calculates weekly settlements.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety\n- **Routing**: Wouter for lightweight client-side routing\n- **UI Components**: Shadcn/ui component library built on Radix UI primitives\n- **Styling**: Tailwind CSS with CSS variables for theming\n- **State Management**: TanStack React Query for server state management\n- **Form Handling**: React Hook Form with Zod validation schemas\n- **Build Tool**: Vite for fast development and optimized production builds\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API with centralized route registration\n- **Error Handling**: Global error middleware with structured error responses\n- **Request Logging**: Custom middleware for API request/response logging\n- **Development**: Hot module replacement via Vite integration\n\n### Data Storage Architecture\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Schema Management**: Drizzle Kit for migrations and schema updates\n- **Connection**: Neon Database serverless PostgreSQL\n- **Data Validation**: Shared Zod schemas between frontend and backend\n- **Storage Interface**: Comprehensive IStorage interface abstracting all database operations\n\n### Database Schema Design\nThe system uses five core entities:\n- **Users**: Authentication and role-based access (bookie/assistant roles)\n- **Profiles**: Uplink and downline contact and rate information\n- **Transactions**: Individual inventory movements with points, rates, and commissions\n- **Ledger Entries**: Calculated weekly balances per profile and period\n- **Settlements**: WhatsApp message tracking and settlement records\n- **Audit Logs**: Complete activity tracking for compliance and debugging\n\n### Component Architecture\n- **Layout Components**: Responsive sidebar navigation with mobile support\n- **Modal System**: Reusable modal components for CRUD operations\n- **Data Tables**: Generic table component with pagination and sorting\n- **Form Components**: Type-safe forms with validation and error handling\n- **UI Components**: Consistent design system with accessibility features\n\n### Business Logic Design\n- **Rate Management**: Flexible rate per point system for different profiles\n- **Commission Calculation**: Percentage-based commission on downline transactions\n- **Settlement Processing**: Automated weekly balance calculation and message generation\n- **Audit Trail**: Comprehensive logging of all system activities with user attribution\n\n## External Dependencies\n\n### Database & ORM\n- **Neon Database**: Serverless PostgreSQL hosting\n- **Drizzle ORM**: Type-safe database operations and migrations\n- **Drizzle Kit**: Schema management and migration tools\n\n### UI & Styling\n- **Radix UI**: Accessible component primitives for complex UI elements\n- **Tailwind CSS**: Utility-first CSS framework for responsive design\n- **Shadcn/ui**: Pre-built component library with consistent theming\n- **Lucide React**: Icon library for UI elements\n\n### State & Data Management\n- **TanStack React Query**: Server state management with caching and synchronization\n- **React Hook Form**: Form handling with validation\n- **Zod**: Runtime type validation and schema definition\n\n### Development Tools\n- **Vite**: Fast build tool with HMR and development server\n- **TypeScript**: Static typing for both frontend and backend\n- **ESBuild**: Fast JavaScript bundler for production builds\n\n### Future Integrations\n- **WhatsApp Business API**: For automated settlement message delivery\n- **Session Management**: connect-pg-simple for PostgreSQL-backed sessions\n- **Authentication**: JWT or session-based authentication system","size_bytes":4485},"setup-complete.sh":{"content":"#!/bin/bash\n\n# Bookie Inventory Management System - Complete Setup Script\necho \"🚀 Setting up Complete Bookie Inventory Management System...\"\necho \"\"\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Check if Node.js is installed\nif ! command -v node &> /dev/null; then\n    echo -e \"${RED}❌ Node.js is not installed. Please install Node.js 18+ first.${NC}\"\n    echo \"Visit: https://nodejs.org/\"\n    exit 1\nfi\n\n# Check Node.js version\nNODE_VERSION=$(node -v | cut -d'v' -f2 | cut -d'.' -f1)\nif [ \"$NODE_VERSION\" -lt 18 ]; then\n    echo -e \"${RED}❌ Node.js version 18+ is required. Current version: $(node -v)${NC}\"\n    echo \"Please update Node.js from: https://nodejs.org/\"\n    exit 1\nfi\n\necho -e \"${GREEN}✅ Node.js $(node -v) detected${NC}\"\n\n# Setup Web Application\necho -e \"${BLUE}📦 Setting up Web Application...${NC}\"\nnpm install\n\nif [ $? -ne 0 ]; then\n    echo -e \"${RED}❌ Failed to install web app dependencies${NC}\"\n    exit 1\nfi\n\necho -e \"${GREEN}✅ Web app dependencies installed${NC}\"\n\n# Create .env file for web app if it doesn't exist\nif [ ! -f .env ]; then\n    echo -e \"${YELLOW}📝 Creating web app .env file...${NC}\"\n    cat > .env << EOL\nNODE_ENV=development\nPORT=5000\nDATABASE_URL=postgresql://localhost:5432/bookie_db\nEOL\n    echo -e \"${GREEN}✅ Web app .env file created${NC}\"\nelse\n    echo -e \"${YELLOW}ℹ️  Web app .env file already exists${NC}\"\nfi\n\n# Setup Mobile Application\necho \"\"\necho -e \"${BLUE}📱 Setting up Mobile Application...${NC}\"\n\n# Check if Expo CLI is installed\nif ! command -v expo &> /dev/null; then\n    echo -e \"${YELLOW}📦 Installing Expo CLI globally...${NC}\"\n    npm install -g @expo/cli\n    \n    if [ $? -ne 0 ]; then\n        echo -e \"${RED}❌ Failed to install Expo CLI${NC}\"\n        exit 1\n    fi\n    echo -e \"${GREEN}✅ Expo CLI installed${NC}\"\nelse\n    echo -e \"${GREEN}✅ Expo CLI already installed${NC}\"\nfi\n\n# Install mobile app dependencies\ncd mobile\necho -e \"${BLUE}📦 Installing mobile app dependencies...${NC}\"\nnpm install\n\nif [ $? -ne 0 ]; then\n    echo -e \"${RED}❌ Failed to install mobile app dependencies${NC}\"\n    echo -e \"${YELLOW}💡 This is expected due to dependency conflicts in the demo environment${NC}\"\n    echo -e \"${YELLOW}   In a real setup, the mobile app would have separate dependencies${NC}\"\nelse\n    echo -e \"${GREEN}✅ Mobile app dependencies installed${NC}\"\nfi\n\n# Get local IP address for mobile app\necho -e \"${BLUE}🌐 Configuring mobile app API endpoint...${NC}\"\nLOCAL_IP=\"\"\n\n# Try to get local IP on different systems\nif command -v ifconfig &> /dev/null; then\n    LOCAL_IP=$(ifconfig | grep -Eo 'inet (addr:)?([0-9]*\\.){3}[0-9]*' | grep -Eo '([0-9]*\\.){3}[0-9]*' | grep -v '127.0.0.1' | head -n1)\nelif command -v ip &> /dev/null; then\n    LOCAL_IP=$(ip route get 1 | grep -oP 'src \\K\\S+')\nfi\n\n# Create mobile app .env file\nif [ ! -f .env ]; then\n    echo -e \"${YELLOW}📝 Creating mobile app .env file...${NC}\"\n    if [ ! -z \"$LOCAL_IP\" ]; then\n        echo \"EXPO_PUBLIC_API_URL=http://${LOCAL_IP}:5000/api\" > .env\n        echo -e \"${GREEN}✅ Mobile app configured for API at http://${LOCAL_IP}:5000/api${NC}\"\n    else\n        echo \"EXPO_PUBLIC_API_URL=http://localhost:5000/api\" > .env\n        echo -e \"${YELLOW}⚠️  Could not detect local IP, using localhost${NC}\"\n        echo -e \"${YELLOW}   Update mobile/.env with your local IP for device testing${NC}\"\n    fi\nelse\n    echo -e \"${YELLOW}ℹ️  Mobile app .env file already exists${NC}\"\nfi\n\ncd ..\n\n# Final setup complete message\necho \"\"\necho -e \"${GREEN}🎉 Setup complete! Both applications are ready.${NC}\"\necho \"\"\necho -e \"${BLUE}🌐 Web Application:${NC}\"\necho \"   1. Start the web server:\"\necho \"      npm run dev\"\necho \"\"\necho \"   2. Open your browser:\"\necho \"      http://localhost:5000\"\necho \"\"\necho -e \"${BLUE}📱 Mobile Application:${NC}\"\necho \"   1. Navigate to mobile directory:\"\necho \"      cd mobile\"\necho \"\"\necho \"   2. Start Expo development server:\"\necho \"      npx expo start\"\necho \"\"\necho \"   3. Test on your device:\"\necho \"      - Install Expo Go from App Store/Google Play\"\necho \"      - Scan QR code to run on your phone\"\necho \"      - Or use: npx expo start --ios / --android\"\necho \"\"\necho -e \"${GREEN}🔐 Demo Credentials (both apps):${NC}\"\necho \"   Bookie: admin / admin123\"\necho \"   Assistant: assistant / assistant123\"\necho \"\"\necho -e \"${YELLOW}📋 Note:${NC}\"\necho \"   - Web app uses in-memory storage (data resets on restart)\"\necho \"   - Mobile app connects to web app backend\"\necho \"   - For production, configure PostgreSQL database\"\necho \"\"\necho -e \"${BLUE}💡 Mobile Setup Tips:${NC}\"\necho \"   - Update mobile/.env with your local IP for device testing\"\necho \"   - Ensure web server is running before testing mobile app\"\necho \"   - Use 'npx expo start --tunnel' if having network issues\"\necho \"\"\necho -e \"${GREEN}✨ Enjoy your Bookie Inventory Management System!${NC}\"","size_bytes":4951},"setup-local.sh":{"content":"#!/bin/bash\n\n# Bookie Inventory Management System - Local Setup Script\necho \"🚀 Setting up Bookie Inventory Management System locally...\"\n\n# Check if Node.js is installed\nif ! command -v node &> /dev/null; then\n    echo \"❌ Node.js is not installed. Please install Node.js 18+ first.\"\n    echo \"Visit: https://nodejs.org/\"\n    exit 1\nfi\n\n# Check Node.js version\nNODE_VERSION=$(node -v | cut -d'v' -f2 | cut -d'.' -f1)\nif [ \"$NODE_VERSION\" -lt 18 ]; then\n    echo \"❌ Node.js version 18+ is required. Current version: $(node -v)\"\n    echo \"Please update Node.js from: https://nodejs.org/\"\n    exit 1\nfi\n\necho \"✅ Node.js $(node -v) detected\"\n\n# Install dependencies\necho \"📦 Installing dependencies...\"\nnpm install\n\nif [ $? -ne 0 ]; then\n    echo \"❌ Failed to install dependencies\"\n    exit 1\nfi\n\necho \"✅ Dependencies installed successfully\"\n\n# Create .env file if it doesn't exist\nif [ ! -f .env ]; then\n    echo \"📝 Creating .env file...\"\n    cat > .env << EOL\nNODE_ENV=development\nPORT=5000\nDATABASE_URL=postgresql://localhost:5432/bookie_db\nEOL\n    echo \"✅ .env file created\"\nelse\n    echo \"ℹ️  .env file already exists\"\nfi\n\necho \"\"\necho \"🎉 Setup complete! To start the application:\"\necho \"\"\necho \"1. Start the development server:\"\necho \"   npm run dev\"\necho \"\"\necho \"2. Open your browser and go to:\"\necho \"   http://localhost:5000\"\necho \"\"\necho \"3. Use these demo credentials to login:\"\necho \"   Bookie: admin / admin123\"\necho \"   Assistant: assistant / assistant123\"\necho \"\"\necho \"📋 The system uses in-memory storage by default.\"\necho \"   All data will reset when you restart the server.\"\necho \"\"\necho \"💡 For production setup with PostgreSQL:\"\necho \"   1. Install PostgreSQL\"\necho \"   2. Create a database named 'bookie_db'\"\necho \"   3. Update DATABASE_URL in .env file\"\necho \"   4. The app will automatically create tables\"\necho \"\"","size_bytes":1865},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"mobile/App.tsx":{"content":"import { StatusBar } from 'expo-status-bar';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { useEffect, useState, createContext, useContext } from 'react';\nimport * as SecureStore from 'expo-secure-store';\n\n// Import screens\nimport WelcomeScreen from './src/screens/WelcomeScreen';\nimport LoginScreen from './src/screens/LoginScreen';\nimport DashboardScreen from './src/screens/DashboardScreen';\nimport ProfilesScreen from './src/screens/ProfilesScreen';\nimport TransactionsScreen from './src/screens/TransactionsScreen';\nimport AddTransactionScreen from './src/screens/AddTransactionScreen';\n\ntype RootStackParamList = {\n  Welcome: undefined;\n  Login: undefined;\n  Dashboard: undefined;\n  Profiles: undefined;\n  Transactions: undefined;\n  AddTransaction: undefined;\n};\n\nconst Stack = createNativeStackNavigator<RootStackParamList>();\nconst queryClient = new QueryClient();\n\n// Auth Context\ninterface AuthContextType {\n  isAuthenticated: boolean;\n  login: (token: string) => Promise<void>;\n  logout: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | null>(null);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within AuthProvider');\n  }\n  return context;\n};\n\nfunction AuthProvider({ children }: { children: React.ReactNode }) {\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean | null>(null);\n\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n\n  const checkAuthStatus = async () => {\n    try {\n      const token = await SecureStore.getItemAsync('auth_token');\n      setIsAuthenticated(!!token);\n    } catch (error) {\n      setIsAuthenticated(false);\n    }\n  };\n\n  const login = async (token: string) => {\n    await SecureStore.setItemAsync('auth_token', token);\n    setIsAuthenticated(true);\n  };\n\n  const logout = async () => {\n    await SecureStore.deleteItemAsync('auth_token');\n    setIsAuthenticated(false);\n  };\n\n  if (isAuthenticated === null) {\n    return null; // Loading state\n  }\n\n  return (\n    <AuthContext.Provider value={{ isAuthenticated, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport default function App() {\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <NavigationContainer>\n          <StatusBar style=\"auto\" />\n          <AppNavigator />\n        </NavigationContainer>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nfunction AppNavigator() {\n  const { isAuthenticated } = useAuth();\n\n  return (\n    <Stack.Navigator \n      screenOptions={{ \n        headerStyle: { backgroundColor: '#3b82f6' },\n        headerTintColor: '#fff',\n        headerTitleStyle: { fontWeight: 'bold' }\n      }}\n    >\n      {!isAuthenticated ? (\n        // Auth Stack\n        <>\n          <Stack.Screen \n            name=\"Welcome\" \n            component={WelcomeScreen} \n            options={{ headerShown: false }}\n          />\n          <Stack.Screen \n            name=\"Login\" \n            component={LoginScreen}\n            options={{ title: 'Login' }}\n          />\n        </>\n      ) : (\n        // App Stack  \n        <>\n          <Stack.Screen \n            name=\"Dashboard\" \n            component={DashboardScreen}\n            options={{ \n              title: 'Bookie System',\n              headerLeft: () => null // Disable back button\n            }}\n          />\n          <Stack.Screen \n            name=\"Profiles\" \n            component={ProfilesScreen}\n            options={{ title: 'Profiles' }}\n          />\n          <Stack.Screen \n            name=\"Transactions\" \n            component={TransactionsScreen}\n            options={{ title: 'Transactions' }}\n          />\n          <Stack.Screen \n            name=\"AddTransaction\" \n            component={AddTransactionScreen}\n            options={{ title: 'Add Transaction' }}\n          />\n        </>\n      )}\n    </Stack.Navigator>\n  );\n}","size_bytes":4090},"mobile/README.md":{"content":"# Bookie System - React Native Mobile App\n\nA native mobile application for the Bookie Inventory Management System, built with React Native and Expo.\n\n## 🚀 Quick Setup\n\n### Prerequisites\n- Node.js 18+ \n- Expo CLI: `npm install -g @expo/cli`\n- Expo Go app on your phone (for testing)\n\n### Installation\n\n1. **Navigate to mobile directory:**\n   ```bash\n   cd mobile\n   ```\n\n2. **Install dependencies:**\n   ```bash\n   npm install\n   ```\n\n3. **Start the development server:**\n   ```bash\n   npx expo start\n   ```\n\n4. **Test on your device:**\n   - Install Expo Go from App Store/Google Play\n   - Scan the QR code shown in terminal\n   - Or use `npx expo start --android` / `npx expo start --ios`\n\n## 📱 App Features\n\n### ✅ Authentication Flow\n- **Welcome Screen**: Feature overview with call-to-action\n- **Login Screen**: Secure authentication with demo credentials\n- **Auto-login**: Persistent session management with secure storage\n\n### ✅ Core Screens\n\n#### Dashboard Screen\n- Real-time key metrics (Total Profiles, Active Transactions, P&L, Settlements)\n- Recent transactions list with amounts and statuses\n- Quick action buttons for common tasks\n- Logout functionality\n\n#### Profiles Screen  \n- **Uplinks Section**: View supplier profiles with rates\n- **Downlines Section**: Manage agent profiles with commission structures\n- Add new uplink/downline functionality\n- Status indicators (Active/Inactive)\n\n#### Transactions Screen\n- Complete transaction history with filtering\n- Transaction details: points, rates, amounts, commissions\n- Status indicators (Completed/Pending)\n- Credit/Debit type indicators\n\n#### Add Transaction Screen\n- Transaction type selection (Credit/Debit)\n- Profile selection with horizontal scroll\n- Points and rate input with validation\n- Real-time calculation summary\n- Commission calculation\n\n## 🔧 Technical Architecture\n\n### Navigation Structure\n```\nAuthStack (Not Authenticated):\n├── Welcome Screen\n└── Login Screen\n\nAppStack (Authenticated):\n├── Dashboard Screen  \n├── Profiles Screen\n├── Transactions Screen\n└── Add Transaction Screen\n```\n\n### Key Technologies\n- **React Native 0.72+** with TypeScript\n- **Expo SDK 49+** for cross-platform development\n- **React Navigation 6** for navigation management\n- **TanStack React Query** for state management\n- **Expo Secure Store** for secure token storage\n- **Zod** for form validation\n\n### API Integration\n- Custom API client with automatic token management\n- Demo authentication with admin/assistant roles\n- RESTful API communication with the backend\n- Error handling and loading states\n\n## 🎨 Design System\n\n### Color Palette\n- Primary: `#3b82f6` (Blue)\n- Success: `#10b981` (Green) \n- Warning: `#f59e0b` (Amber)\n- Error: `#ef4444` (Red)\n- Text: `#1e293b` (Slate)\n- Muted: `#64748b` (Slate Light)\n\n### Typography\n- Headers: Bold, 16-24px\n- Body: Regular, 14-16px\n- Captions: 12px with muted colors\n\n## 📊 Demo Credentials\n\n| Role | Username | Password | Access |\n|------|----------|----------|---------|\n| Bookie | admin | admin123 | Full access |  \n| Assistant | assistant | assistant123 | Limited access |\n\n## 🧪 Testing\n\nThe app includes comprehensive `testID` attributes for end-to-end testing:\n\n```typescript\n// Examples\ntestID=\"login-button\"\ntestID=\"metric-card-0\" \ntestID=\"transaction-123\"\ntestID=\"add-uplink-button\"\n```\n\n## 🔄 Data Flow\n\n1. **Authentication**: Login → Store token → Navigate to app\n2. **API Requests**: Auto-attach bearer token from secure storage\n3. **State Management**: React Query for caching and synchronization\n4. **Logout**: Clear token → Navigate to welcome screen\n\n## 🚀 Build & Deploy\n\n### Development Build\n```bash\nnpx expo build:ios\nnpx expo build:android\n```\n\n### Production Build\n```bash\n# Configure app.json for production\nnpx expo build:ios --release-channel production\nnpx expo build:android --release-channel production\n```\n\n### App Store Deployment\n1. Configure signing certificates in Expo\n2. Build signed binaries\n3. Upload to App Store Connect / Google Play Console\n4. Submit for review\n\n## 🔧 Configuration\n\n### Environment Variables\nCreate a `.env` file in the mobile directory:\n\n```env\nAPI_BASE_URL=http://localhost:5000/api\nEXPO_PUBLIC_API_URL=http://localhost:5000/api\n```\n\n### App Configuration (app.json)\n- App name, bundle IDs, and version\n- Icon and splash screen assets\n- Platform-specific configurations\n- Deep linking and permissions\n\n## 🐛 Troubleshooting\n\n### Common Issues\n\n**Metro bundler errors:**\n```bash\nnpx expo start --clear\n```\n\n**iOS simulator not loading:**\n```bash\nnpx expo start --ios --clear\n```\n\n**Android build issues:**\n```bash\nnpx expo start --android --clear\n```\n\n**Dependency conflicts:**\n```bash\nrm -rf node_modules package-lock.json\nnpm install\n```\n\n## 📂 Project Structure\n\n```\nmobile/\n├── App.tsx                 # Main app component with navigation\n├── app.json               # Expo configuration\n├── package.json           # Dependencies and scripts\n└── src/\n    ├── screens/           # All screen components\n    │   ├── WelcomeScreen.tsx\n    │   ├── LoginScreen.tsx\n    │   ├── DashboardScreen.tsx\n    │   ├── ProfilesScreen.tsx\n    │   ├── TransactionsScreen.tsx\n    │   └── AddTransactionScreen.tsx\n    ├── types/             # TypeScript type definitions\n    │   └── navigation.ts\n    └── utils/             # Utilities and API client\n        └── api.ts\n```\n\n## 🔗 Integration with Web App\n\nThe mobile app is designed to work with the existing web backend:\n\n- **Shared API**: Uses the same REST endpoints as the web app\n- **Consistent Data**: Same data models and validation schemas\n- **Authentication**: Compatible token-based auth system\n- **Real-time Sync**: React Query ensures data consistency\n\n## 📱 Device Support\n\n### iOS\n- iOS 13.0 and above\n- iPhone and iPad compatible\n- Supports Dark Mode\n- Optimized for all screen sizes\n\n### Android  \n- Android 6.0+ (API level 23)\n- Supports Material Design\n- Adaptive icons\n- Edge-to-edge display support\n\n## 🔒 Security Features\n\n- **Secure Token Storage**: Uses Expo Secure Store for sensitive data\n- **Input Validation**: Zod schemas for form validation\n- **API Security**: Bearer token authentication\n- **Session Management**: Automatic token refresh and cleanup","size_bytes":6357},"mobile/babel.config.js":{"content":"module.exports = function(api) {\n  api.cache(true);\n  return {\n    presets: ['babel-preset-expo'],\n  };\n};","size_bytes":106},"mobile/index.js":{"content":"import { registerRootComponent } from 'expo';\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in the Expo client or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);","size_bytes":313},"mobile/metro.config.js":{"content":"const { getDefaultConfig } = require('expo/metro-config');\n\nconst config = getDefaultConfig(__dirname);\n\n// Add any custom Metro configuration here\nconfig.resolver.alias = {\n  '@': './src',\n};\n\nmodule.exports = config;","size_bytes":218},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertProfileSchema, insertTransactionSchema, insertUserSchema, insertSettlementSchema, insertAuditLogSchema, type UserPublic } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Profile routes\n  app.get(\"/api/profiles\", async (req, res) => {\n    try {\n      const profiles = await storage.getAllProfiles();\n      res.json(profiles);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch profiles\" });\n    }\n  });\n\n  app.get(\"/api/profiles/:id\", async (req, res) => {\n    try {\n      const profile = await storage.getProfile(req.params.id);\n      if (!profile) {\n        return res.status(404).json({ error: \"Profile not found\" });\n      }\n      res.json(profile);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch profile\" });\n    }\n  });\n\n  app.post(\"/api/profiles\", async (req, res) => {\n    try {\n      const profileData = insertProfileSchema.parse(req.body);\n      const profile = await storage.createProfile(profileData);\n      \n      // Create audit log\n      await storage.createAuditLog({\n        userId: \"system\", // In a real app, get from session\n        action: \"CREATE\",\n        resource: \"Profile\",\n        resourceId: profile.id,\n        details: `Created profile: ${profile.name}`,\n        ipAddress: req.ip,\n      });\n\n      res.status(201).json(profile);\n    } catch (error) {\n      console.error(\"Profile creation error:\", error);\n      if (error instanceof Error) {\n        res.status(400).json({ error: error.message });\n      } else {\n        res.status(400).json({ error: \"Invalid profile data\" });\n      }\n    }\n  });\n\n  app.put(\"/api/profiles/:id\", async (req, res) => {\n    try {\n      const profileData = insertProfileSchema.partial().parse(req.body);\n      const profile = await storage.updateProfile(req.params.id, profileData);\n      \n      // Create audit log\n      await storage.createAuditLog({\n        userId: \"system\", // In a real app, get from session\n        action: \"UPDATE\",\n        resource: \"Profile\",\n        resourceId: profile.id,\n        details: `Updated profile: ${profile.name}`,\n        ipAddress: req.ip,\n      });\n\n      res.json(profile);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to update profile\" });\n    }\n  });\n\n  app.delete(\"/api/profiles/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteProfile(req.params.id);\n      if (!success) {\n        return res.status(404).json({ error: \"Profile not found\" });\n      }\n      \n      // Create audit log\n      await storage.createAuditLog({\n        userId: \"system\", // In a real app, get from session\n        action: \"DELETE\",\n        resource: \"Profile\",\n        resourceId: req.params.id,\n        details: `Deleted profile: ${req.params.id}`,\n        ipAddress: req.ip,\n      });\n\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete profile\" });\n    }\n  });\n\n  // Transaction routes\n  app.get(\"/api/transactions\", async (req, res) => {\n    try {\n      const transactions = await storage.getAllTransactions();\n      res.json(transactions);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch transactions\" });\n    }\n  });\n\n  app.post(\"/api/transactions\", async (req, res) => {\n    try {\n      const transactionData = insertTransactionSchema.parse(req.body);\n      const transaction = await storage.createTransaction(transactionData);\n      \n      // Create audit log\n      await storage.createAuditLog({\n        userId: \"system\", // In a real app, get from session\n        action: \"CREATE\",\n        resource: \"Transaction\",\n        resourceId: transaction.id,\n        details: `Created transaction: ${transaction.type} - ${transaction.points} points`,\n        ipAddress: req.ip,\n      });\n\n      res.status(201).json(transaction);\n    } catch (error) {\n      console.error(\"Transaction creation error:\", error);\n      if (error instanceof Error) {\n        res.status(400).json({ error: error.message });\n      } else {\n        res.status(400).json({ error: \"Invalid transaction data\" });\n      }\n    }\n  });\n\n  app.put(\"/api/transactions/:id\", async (req, res) => {\n    try {\n      const transactionData = insertTransactionSchema.partial().parse(req.body);\n      const transaction = await storage.updateTransaction(req.params.id, transactionData);\n      \n      // Create audit log\n      await storage.createAuditLog({\n        userId: \"system\", // In a real app, get from session\n        action: \"UPDATE\",\n        resource: \"Transaction\",\n        resourceId: transaction.id,\n        details: `Updated transaction: ${transaction.type} - ${transaction.points} points`,\n        ipAddress: req.ip,\n      });\n\n      res.json(transaction);\n    } catch (error) {\n      console.error(\"Transaction update error:\", error);\n      if (error instanceof Error) {\n        res.status(400).json({ error: error.message });\n      } else {\n        res.status(400).json({ error: \"Failed to update transaction\" });\n      }\n    }\n  });\n\n  app.delete(\"/api/transactions/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteTransaction(req.params.id);\n      if (!success) {\n        return res.status(404).json({ error: \"Transaction not found\" });\n      }\n      \n      // Create audit log\n      await storage.createAuditLog({\n        userId: \"system\", // In a real app, get from session\n        action: \"DELETE\",\n        resource: \"Transaction\",\n        resourceId: req.params.id,\n        details: `Deleted transaction: ${req.params.id}`,\n        ipAddress: req.ip,\n      });\n\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete transaction\" });\n    }\n  });\n\n  // User routes\n  app.get(\"/api/users\", async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch users\" });\n    }\n  });\n\n  app.post(\"/api/users\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      const user = await storage.createUser(userData);\n      \n      // Create audit log\n      await storage.createAuditLog({\n        userId: \"system\", // In a real app, get from session\n        action: \"CREATE\",\n        resource: \"User\",\n        resourceId: user.id,\n        details: `Created user: ${user.username}`,\n        ipAddress: req.ip,\n      });\n\n      res.status(201).json(user);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid user data\" });\n    }\n  });\n\n  app.put(\"/api/users/:id\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.partial().parse(req.body);\n      const user = await storage.updateUser(req.params.id, userData);\n      \n      // Create audit log\n      await storage.createAuditLog({\n        userId: \"system\", // In a real app, get from session\n        action: \"UPDATE\", \n        resource: \"User\",\n        resourceId: user.id,\n        details: `Updated user: ${user.username}`,\n        ipAddress: req.ip,\n      });\n\n      res.json(user);\n    } catch (error) {\n      console.error(\"User update error:\", error);\n      if (error instanceof Error) {\n        res.status(400).json({ error: error.message });\n      } else {\n        res.status(400).json({ error: \"Failed to update user\" });\n      }\n    }\n  });\n\n  app.delete(\"/api/users/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteUser(req.params.id);\n      if (!success) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      \n      // Create audit log\n      await storage.createAuditLog({\n        userId: \"system\", // In a real app, get from session\n        action: \"DELETE\",\n        resource: \"User\",\n        resourceId: req.params.id,\n        details: `Deleted user: ${req.params.id}`,\n        ipAddress: req.ip,\n      });\n\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete user\" });\n    }\n  });\n\n  // Ledger routes\n  app.get(\"/api/ledger\", async (req, res) => {\n    try {\n      const ledgerEntries = await storage.getAllLedgerEntries();\n      res.json(ledgerEntries);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch ledger entries\" });\n    }\n  });\n\n  app.post(\"/api/ledger/calculate\", async (req, res) => {\n    try {\n      // Calculate ledger entries based on real transaction data\n      const transactions = await storage.getAllTransactions();\n      const profiles = await storage.getAllProfiles();\n      \n      console.log(`Ledger calculation started - Found ${transactions.length} transactions and ${profiles.length} profiles`);\n      \n      // Clear existing ledger entries\n      const existingEntries = await storage.getAllLedgerEntries();\n      for (const entry of existingEntries) {\n        await storage.deleteLedgerEntry(entry.id);\n      }\n      \n      // Calculate balances per profile\n      const profileBalances = new Map<string, {\n        profileId: string,\n        totalPoints: number,\n        totalAmount: number,\n        commissionAmount: number,\n        transactionCount: number,\n        averageRate: number\n      }>();\n      \n      for (const transaction of transactions) {\n        const existing = profileBalances.get(transaction.profileId) || {\n          profileId: transaction.profileId,\n          totalPoints: 0,\n          totalAmount: 0,\n          commissionAmount: 0,\n          transactionCount: 0,\n          averageRate: 0\n        };\n        \n        const transactionAmount = parseFloat(transaction.totalAmount);\n        const commissionAmount = transaction.commissionPercentage \n          ? (transactionAmount * parseFloat(transaction.commissionPercentage)) / 100 \n          : 0;\n        \n        existing.totalPoints += transaction.points;\n        existing.totalAmount += transactionAmount;\n        existing.commissionAmount += commissionAmount;\n        existing.transactionCount += 1;\n        existing.averageRate = existing.totalAmount / existing.totalPoints;\n        \n        profileBalances.set(transaction.profileId, existing);\n      }\n      \n      // Create ledger entries\n      const currentDate = new Date();\n      const period = `${currentDate.getFullYear()}-${String(currentDate.getMonth() + 1).padStart(2, '0')}`;\n      \n      for (const [profileId, balance] of profileBalances) {\n        const profile = profiles.find(p => p.id === profileId);\n        if (!profile) continue;\n        \n        // Calculate net balance (positive = receive, negative = owe)\n        let netBalance = 0;\n        if (profile.type === \"uplink\") {\n          // For uplinks, we owe them money (negative balance)\n          netBalance = -(balance.totalAmount + balance.commissionAmount);\n        } else {\n          // For downlines, they owe us money (positive balance)  \n          netBalance = balance.totalAmount - balance.commissionAmount;\n        }\n        \n        const ledgerEntry = {\n          id: crypto.randomUUID(),\n          profileId: profileId,\n          period: period,\n          totalPoints: balance.totalPoints,\n          averageRate: balance.averageRate.toFixed(2),\n          commission: balance.commissionAmount > 0 ? balance.commissionAmount.toFixed(2) : null,\n          balance: netBalance.toFixed(2),\n          status: \"pending\" as const,\n          createdAt: currentDate,\n          updatedAt: currentDate\n        };\n        \n        await storage.createLedgerEntry(ledgerEntry);\n      }\n      \n      // Create audit log\n      await storage.createAuditLog({\n        userId: \"system\", // In a real app, get from session\n        action: \"CALCULATE\",\n        resource: \"Ledger\",\n        resourceId: null,\n        details: `Calculated ledger for ${profileBalances.size} profiles in period ${period}`,\n        ipAddress: req.ip,\n      });\n\n      const newEntries = await storage.getAllLedgerEntries();\n      res.json({ \n        message: \"Ledger calculation completed successfully\",\n        entriesCalculated: newEntries.length,\n        period: period,\n        entries: newEntries\n      });\n    } catch (error) {\n      console.error(\"Ledger calculation error:\", error);\n      res.status(500).json({ error: \"Failed to calculate ledger\" });\n    }\n  });\n\n  // Settlement routes\n  app.get(\"/api/settlements\", async (req, res) => {\n    try {\n      const settlements = await storage.getAllSettlements();\n      res.json(settlements);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch settlements\" });\n    }\n  });\n\n  app.post(\"/api/settlements\", async (req, res) => {\n    try {\n      const settlementData = insertSettlementSchema.parse(req.body);\n      \n      // Get current period if not provided\n      const period = settlementData.period || new Date().toISOString().slice(0, 7); // YYYY-MM\n      \n      // Get ledger entry for this profile and period to calculate amount\n      const ledgerEntries = await storage.getLedgerEntriesByPeriod(period);\n      const profileLedger = ledgerEntries.find(entry => entry.profileId === settlementData.profileId);\n      \n      // Calculate amount and message from ledger data\n      let calculatedAmount = settlementData.amount;\n      let calculatedMessage = settlementData.message;\n      \n      if (profileLedger) {\n        calculatedAmount = Math.abs(parseFloat(profileLedger.balance)).toString();\n        const profile = await storage.getProfile(settlementData.profileId);\n        const isOwed = parseFloat(profileLedger.balance) < 0;\n        calculatedMessage = `${period} settlement for ${profile?.name}: ${isOwed ? 'Amount owed' : 'Amount receivable'} ₹${calculatedAmount}`;\n      }\n      \n      const settlement = await storage.createSettlement({\n        ...settlementData,\n        id: crypto.randomUUID(),\n        period,\n        amount: calculatedAmount,\n        message: calculatedMessage,\n        createdAt: new Date(),\n        sentAt: settlementData.status === \"sent\" ? new Date() : null,\n      });\n      \n      // Create audit log\n      await storage.createAuditLog({\n        userId: \"system\", // In a real app, get from session\n        action: \"CREATE\",\n        resource: \"Settlement\",\n        resourceId: settlement.id,\n        details: `Created settlement for profile: ${settlement.profileId}, period: ${period}, amount: ₹${calculatedAmount}`,\n        ipAddress: req.ip,\n      });\n\n      res.status(201).json(settlement);\n    } catch (error) {\n      console.error(\"Settlement creation error:\", error);\n      res.status(400).json({ error: \"Invalid settlement data\" });\n    }\n  });\n\n  // Reports routes\n  app.get(\"/api/reports\", async (req, res) => {\n    try {\n      const { startDate, endDate, reportType = \"profit-loss\" } = req.query;\n      \n      // Default date range if not provided\n      const start = startDate ? new Date(startDate as string) : new Date(new Date().getFullYear(), new Date().getMonth(), 1);\n      const end = endDate ? new Date(endDate as string) : new Date();\n      \n      // Get transactions in date range\n      const transactions = await storage.getTransactionsByDateRange(start, end);\n      const profiles = await storage.getAllProfiles();\n      \n      // Calculate report data\n      const reportData = [];\n      const profileStats = new Map();\n      \n      // Initialize stats for all profiles\n      profiles.forEach(profile => {\n        profileStats.set(profile.id, {\n          profileName: profile.name,\n          type: profile.type === \"uplink\" ? \"Uplink\" : \"Downline\",\n          volume: 0,\n          revenue: 0,\n          commission: 0,\n          netPL: 0,\n          isProfit: false\n        });\n      });\n      \n      // Process transactions\n      transactions.forEach(transaction => {\n        const stats = profileStats.get(transaction.profileId);\n        if (!stats) return;\n        \n        const amount = parseFloat(transaction.totalAmount);\n        const commission = transaction.commissionPercentage ? \n          (amount * parseFloat(transaction.commissionPercentage)) / 100 : 0;\n        \n        stats.volume += transaction.points;\n        \n        if (transaction.type === \"taken\") {\n          // We took from uplink - this is our cost\n          stats.revenue = 0; // Uplinks don't generate revenue for us\n          stats.commission = 0;\n          stats.netPL -= amount; // We owe money to uplink\n        } else {\n          // We gave to downline - this is our revenue\n          stats.revenue += amount;\n          stats.commission += commission;\n          stats.netPL += commission; // Our profit from commission\n        }\n        \n        stats.isProfit = stats.netPL > 0;\n      });\n      \n      // Convert to array and format\n      profileStats.forEach((stats, profileId) => {\n        if (stats.volume > 0) { // Only include profiles with activity\n          reportData.push({\n            id: profileId,\n            profileName: stats.profileName,\n            type: stats.type,\n            volume: `${stats.volume.toLocaleString(\"en-IN\")} pts`,\n            revenue: stats.revenue > 0 ? `₹${stats.revenue.toLocaleString(\"en-IN\")}` : \"-\",\n            commission: stats.commission > 0 ? `₹${stats.commission.toLocaleString(\"en-IN\")}` : \"-\",\n            netPL: `${stats.netPL >= 0 ? '+' : ''}₹${stats.netPL.toLocaleString(\"en-IN\")}`,\n            isProfit: stats.isProfit\n          });\n        }\n      });\n      \n      // Calculate summary totals\n      const totals = Array.from(profileStats.values()).reduce((acc, stats) => {\n        acc.totalRevenue += Math.max(0, stats.revenue);\n        acc.totalCosts += Math.abs(Math.min(0, stats.netPL));\n        acc.grossProfit += stats.netPL;\n        return acc;\n      }, { totalRevenue: 0, totalCosts: 0, grossProfit: 0 });\n      \n      const profitMargin = totals.totalRevenue > 0 ? \n        (totals.grossProfit / totals.totalRevenue * 100) : 0;\n      \n      res.json({\n        reportType,\n        period: {\n          start: start.toISOString().split('T')[0],\n          end: end.toISOString().split('T')[0]\n        },\n        summary: {\n          totalRevenue: totals.totalRevenue,\n          totalCosts: totals.totalCosts,\n          grossProfit: totals.grossProfit,\n          profitMargin: profitMargin\n        },\n        data: reportData\n      });\n    } catch (error) {\n      console.error(\"Reports generation error:\", error);\n      res.status(500).json({ error: \"Failed to generate reports\" });\n    }\n  });\n\n  // Audit log routes\n  app.get(\"/api/audit\", async (req, res) => {\n    try {\n      const { \n        startDate, \n        endDate, \n        action, \n        userId, \n        resource, \n        page = \"1\", \n        limit = \"50\" \n      } = req.query;\n      \n      let auditLogs: AuditLog[] = [];\n      \n      // Get audit logs based on filters\n      if (startDate && endDate) {\n        auditLogs = await storage.getAuditLogsByDateRange(\n          new Date(startDate as string), \n          new Date(endDate as string)\n        );\n      } else if (userId && userId !== \"all\") {\n        auditLogs = await storage.getAuditLogsByUser(userId as string);\n      } else {\n        auditLogs = await storage.getAuditLogs();\n      }\n      \n      // Apply additional filters\n      let filteredLogs = auditLogs.filter(log => {\n        const matchesAction = !action || action === \"all\" || log.action === action;\n        const matchesUser = !userId || userId === \"all\" || log.userId === userId;\n        const matchesResource = !resource || resource === \"all\" || log.resource === resource;\n        \n        return matchesAction && matchesUser && matchesResource;\n      });\n      \n      // Sort by most recent first\n      filteredLogs.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n      \n      // Pagination\n      const pageNum = parseInt(page as string, 10);\n      const limitNum = parseInt(limit as string, 10);\n      const startIndex = (pageNum - 1) * limitNum;\n      const endIndex = startIndex + limitNum;\n      const paginatedLogs = filteredLogs.slice(startIndex, endIndex);\n      \n      res.json({\n        data: paginatedLogs,\n        pagination: {\n          page: pageNum,\n          limit: limitNum,\n          total: filteredLogs.length,\n          totalPages: Math.ceil(filteredLogs.length / limitNum),\n          hasNext: endIndex < filteredLogs.length,\n          hasPrev: pageNum > 1\n        }\n      });\n    } catch (error) {\n      console.error(\"Audit logs fetch error:\", error);\n      res.status(500).json({ error: \"Failed to fetch audit logs\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":20644},"server/storage.ts":{"content":"import { type User, type UserPublic, type InsertUser, type Profile, type InsertProfile, type Transaction, type InsertTransaction, type LedgerEntry, type Settlement, type AuditLog, type InsertAuditLog } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport * as bcrypt from \"bcrypt\";\n\n// Comprehensive storage interface for the Bookie Inventory Management System\nexport interface IStorage {\n  // User management\n  getUser(id: string): Promise<UserPublic | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>; // Keep internal for auth\n  createUser(user: InsertUser): Promise<UserPublic>;\n  updateUser(id: string, user: Partial<InsertUser>): Promise<UserPublic>;\n  deleteUser(id: string): Promise<boolean>;\n  getAllUsers(): Promise<UserPublic[]>;\n\n  // Profile management\n  getProfile(id: string): Promise<Profile | undefined>;\n  getAllProfiles(): Promise<Profile[]>;\n  getProfilesByType(type: \"uplink\" | \"downline\"): Promise<Profile[]>;\n  createProfile(profile: InsertProfile): Promise<Profile>;\n  updateProfile(id: string, profile: Partial<InsertProfile>): Promise<Profile>;\n  deleteProfile(id: string): Promise<boolean>;\n\n  // Transaction management\n  getTransaction(id: string): Promise<Transaction | undefined>;\n  getAllTransactions(): Promise<Transaction[]>;\n  getTransactionsByProfile(profileId: string): Promise<Transaction[]>;\n  getTransactionsByDateRange(startDate: Date, endDate: Date): Promise<Transaction[]>;\n  createTransaction(transaction: InsertTransaction): Promise<Transaction>;\n  updateTransaction(id: string, transaction: Partial<InsertTransaction>): Promise<Transaction>;\n  deleteTransaction(id: string): Promise<boolean>;\n\n  // Ledger management\n  getLedgerEntry(id: string): Promise<LedgerEntry | undefined>;\n  getAllLedgerEntries(): Promise<LedgerEntry[]>;\n  getLedgerEntriesByPeriod(period: string): Promise<LedgerEntry[]>;\n  createLedgerEntry(entry: LedgerEntry): Promise<LedgerEntry>;\n  updateLedgerEntry(id: string, entry: Partial<LedgerEntry>): Promise<LedgerEntry>;\n\n  // Settlement management\n  getSettlement(id: string): Promise<Settlement | undefined>;\n  getAllSettlements(): Promise<Settlement[]>;\n  getSettlementsByProfile(profileId: string): Promise<Settlement[]>;\n  createSettlement(settlement: Settlement): Promise<Settlement>;\n  updateSettlement(id: string, settlement: Partial<Settlement>): Promise<Settlement>;\n\n  // Audit log management\n  createAuditLog(log: InsertAuditLog): Promise<AuditLog>;\n  getAuditLogs(): Promise<AuditLog[]>;\n  getAuditLogsByUser(userId: string): Promise<AuditLog[]>;\n  getAuditLogsByDateRange(startDate: Date, endDate: Date): Promise<AuditLog[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private profiles: Map<string, Profile>;\n  private transactions: Map<string, Transaction>;\n  private ledgerEntries: Map<string, LedgerEntry>;\n  private settlements: Map<string, Settlement>;\n  private auditLogs: Map<string, AuditLog>;\n\n  constructor() {\n    this.users = new Map();\n    this.profiles = new Map();\n    this.transactions = new Map();\n    this.ledgerEntries = new Map();\n    this.settlements = new Map();\n    this.auditLogs = new Map();\n    \n    // Initialize with sample data\n    this.initializeSampleData();\n    this.initializeSampleTransactions();\n    this.initializeSampleSettlements();\n  }\n\n  // Helper method to convert User to UserPublic (remove password)\n  private toUserPublic(user: User): UserPublic {\n    const { password, ...userPublic } = user;\n    return userPublic;\n  }\n\n  // Helper method to hash password\n  private async hashPassword(password: string): Promise<string> {\n    const saltRounds = 12;\n    return await bcrypt.hash(password, saltRounds);\n  }\n\n  private initializeSampleData() {\n    // Create sample profiles for testing\n    const sampleProfiles: Profile[] = [\n      {\n        id: \"uplink-1\",\n        type: \"uplink\",\n        name: \"Super Exchange\",\n        phone: \"+919876543210\",\n        email: \"contact@superexchange.com\",\n        ratePerPoint: \"1.50\",\n        commissionPercentage: null,\n        notes: \"Primary uplink partner\",\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        id: \"uplink-2\",\n        type: \"uplink\",\n        name: \"Premium Exchange\",\n        phone: \"+919876543211\",\n        email: \"info@premiumexchange.com\",\n        ratePerPoint: \"1.45\",\n        commissionPercentage: null,\n        notes: \"Secondary uplink partner\",\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        id: \"downline-1\",\n        type: \"downline\",\n        name: \"Agent Kumar\",\n        phone: \"+919876543212\",\n        email: \"kumar@agents.com\",\n        ratePerPoint: \"1.65\",\n        commissionPercentage: \"5.0\",\n        notes: \"Top performing agent\",\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        id: \"downline-2\",\n        type: \"downline\",\n        name: \"Agent Sharma\",\n        phone: \"+919876543213\",\n        email: \"sharma@agents.com\",\n        ratePerPoint: \"1.70\",\n        commissionPercentage: \"8.0\",\n        notes: \"Reliable downline agent\",\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    ];\n\n    // Add sample profiles to storage\n    sampleProfiles.forEach(profile => {\n      this.profiles.set(profile.id, profile);\n    });\n  }\n\n  private initializeSampleTransactions() {\n    const now = new Date();\n    \n    // Sample uplink transaction\n    const uplinkTransaction: Transaction = {\n      id: randomUUID(),\n      date: new Date(now.getTime() - 24 * 60 * 60 * 1000), // Yesterday\n      type: \"taken\",\n      profileId: \"uplink-1\",\n      points: 1000,\n      ratePerPoint: \"1.50\",\n      commissionPercentage: null,\n      totalAmount: \"1500.00\",\n      notes: \"Sample uplink transaction\",\n      createdAt: now,\n      updatedAt: now\n    };\n    \n    // Sample downline transaction 1\n    const downlineTransaction1: Transaction = {\n      id: randomUUID(),\n      date: new Date(now.getTime() - 24 * 60 * 60 * 1000), // Yesterday\n      type: \"given\", \n      profileId: \"downline-1\",\n      points: 800,\n      ratePerPoint: \"1.65\",\n      commissionPercentage: \"5.0\",\n      totalAmount: \"1320.00\",\n      notes: \"Sample downline transaction\",\n      createdAt: now,\n      updatedAt: now\n    };\n    \n    // Sample downline transaction 2\n    const downlineTransaction2: Transaction = {\n      id: randomUUID(),\n      date: new Date(now.getTime() - 24 * 60 * 60 * 1000), // Yesterday\n      type: \"given\",\n      profileId: \"downline-2\", \n      points: 500,\n      ratePerPoint: \"1.70\",\n      commissionPercentage: \"8.0\",\n      totalAmount: \"850.00\",\n      notes: \"Sample downline transaction 2\",\n      createdAt: now,\n      updatedAt: now\n    };\n    \n    this.transactions.set(uplinkTransaction.id, uplinkTransaction);\n    this.transactions.set(downlineTransaction1.id, downlineTransaction1);\n    this.transactions.set(downlineTransaction2.id, downlineTransaction2);\n  }\n\n  private initializeSampleSettlements() {\n    const now = new Date();\n    \n    // Sample settlement for uplink\n    const uplinkSettlement: Settlement = {\n      id: randomUUID(),\n      profileId: \"uplink-1\",\n      period: \"2025-09\",\n      amount: \"1500.00\",\n      message: \"Weekly settlement for uplink-1: Amount owed ₹1,500\",\n      status: \"sent\",\n      createdAt: new Date(now.getTime() - 2 * 24 * 60 * 60 * 1000), // 2 days ago\n      sentAt: new Date(now.getTime() - 2 * 24 * 60 * 60 * 1000),\n    };\n    \n    // Sample settlement for downline 1\n    const downlineSettlement1: Settlement = {\n      id: randomUUID(),\n      profileId: \"downline-1\",\n      period: \"2025-09\",\n      amount: \"1254.00\",\n      message: \"Weekly settlement for Agent Kumar: Amount receivable ₹1,254\",\n      status: \"sent\",\n      createdAt: new Date(now.getTime() - 1 * 24 * 60 * 60 * 1000), // 1 day ago\n      sentAt: new Date(now.getTime() - 1 * 24 * 60 * 60 * 1000),\n    };\n    \n    // Sample pending settlement for downline 2\n    const downlineSettlement2: Settlement = {\n      id: randomUUID(),\n      profileId: \"downline-2\",\n      period: \"2025-09\",\n      amount: \"782.00\",\n      message: \"Weekly settlement for Agent Sharma: Amount receivable ₹782\",\n      status: \"pending\",\n      createdAt: now,\n      sentAt: null,\n    };\n    \n    this.settlements.set(uplinkSettlement.id, uplinkSettlement);\n    this.settlements.set(downlineSettlement1.id, downlineSettlement1);\n    this.settlements.set(downlineSettlement2.id, downlineSettlement2);\n  }\n\n  // User methods\n  async getUser(id: string): Promise<UserPublic | undefined> {\n    const user = this.users.get(id);\n    return user ? this.toUserPublic(user) : undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<UserPublic> {\n    const id = randomUUID();\n    const hashedPassword = await this.hashPassword(insertUser.password);\n    const user: User = { \n      ...insertUser,\n      password: hashedPassword,\n      id, \n      isActive: true,\n      lastLogin: null,\n      createdAt: new Date()\n    };\n    this.users.set(id, user);\n    return this.toUserPublic(user);\n  }\n\n  async updateUser(id: string, userData: Partial<InsertUser>): Promise<UserPublic> {\n    const user = this.users.get(id);\n    if (!user) throw new Error(\"User not found\");\n    \n    // Hash password if it's being updated\n    let updatedData = { ...userData };\n    if (userData.password) {\n      updatedData.password = await this.hashPassword(userData.password);\n    }\n    \n    const updatedUser = { ...user, ...updatedData };\n    this.users.set(id, updatedUser);\n    return this.toUserPublic(updatedUser);\n  }\n\n  async deleteUser(id: string): Promise<boolean> {\n    return this.users.delete(id);\n  }\n\n  async getAllUsers(): Promise<UserPublic[]> {\n    return Array.from(this.users.values()).map(user => this.toUserPublic(user));\n  }\n\n  // Profile methods\n  async getProfile(id: string): Promise<Profile | undefined> {\n    return this.profiles.get(id);\n  }\n\n  async getAllProfiles(): Promise<Profile[]> {\n    return Array.from(this.profiles.values());\n  }\n\n  async getProfilesByType(type: \"uplink\" | \"downline\"): Promise<Profile[]> {\n    return Array.from(this.profiles.values()).filter(p => p.type === type);\n  }\n\n  async createProfile(insertProfile: InsertProfile): Promise<Profile> {\n    const id = randomUUID();\n    const profile: Profile = { \n      ...insertProfile, \n      id,\n      isActive: true,\n      email: insertProfile.email || null,\n      notes: insertProfile.notes || null,\n      ratePerPoint: insertProfile.ratePerPoint.toString(),\n      commissionPercentage: insertProfile.commissionPercentage ? insertProfile.commissionPercentage.toString() : null,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.profiles.set(id, profile);\n    return profile;\n  }\n\n  async updateProfile(id: string, profileData: Partial<InsertProfile>): Promise<Profile> {\n    const profile = this.profiles.get(id);\n    if (!profile) throw new Error(\"Profile not found\");\n    \n    // Convert numeric fields to strings and handle null/undefined properly\n    const convertedData: Partial<Profile> = {};\n    \n    // Copy all properties except the ones we need to convert\n    Object.keys(profileData).forEach(key => {\n      if (key !== 'ratePerPoint' && key !== 'commissionPercentage' && key !== 'email') {\n        (convertedData as any)[key] = (profileData as any)[key];\n      }\n    });\n    if (profileData.ratePerPoint !== undefined) {\n      convertedData.ratePerPoint = profileData.ratePerPoint.toString();\n    }\n    if (profileData.commissionPercentage !== undefined) {\n      convertedData.commissionPercentage = profileData.commissionPercentage ? profileData.commissionPercentage.toString() : null;\n    }\n    if (profileData.email !== undefined) {\n      convertedData.email = profileData.email || null;\n    }\n    \n    const updatedProfile = { ...profile, ...convertedData, updatedAt: new Date() };\n    this.profiles.set(id, updatedProfile);\n    return updatedProfile;\n  }\n\n  async deleteProfile(id: string): Promise<boolean> {\n    return this.profiles.delete(id);\n  }\n\n  // Transaction methods\n  async getTransaction(id: string): Promise<Transaction | undefined> {\n    return this.transactions.get(id);\n  }\n\n  async getAllTransactions(): Promise<Transaction[]> {\n    return Array.from(this.transactions.values());\n  }\n\n  async getTransactionsByProfile(profileId: string): Promise<Transaction[]> {\n    return Array.from(this.transactions.values()).filter(t => t.profileId === profileId);\n  }\n\n  async getTransactionsByDateRange(startDate: Date, endDate: Date): Promise<Transaction[]> {\n    return Array.from(this.transactions.values()).filter(t => \n      t.date >= startDate && t.date <= endDate\n    );\n  }\n\n  async createTransaction(insertTransaction: InsertTransaction): Promise<Transaction> {\n    const id = randomUUID();\n    \n    // Calculate total amount\n    const points = Number(insertTransaction.points);\n    const rate = Number(insertTransaction.ratePerPoint);\n    const commission = insertTransaction.commissionPercentage ? Number(insertTransaction.commissionPercentage) : 0;\n    \n    let totalAmount = points * rate;\n    if (insertTransaction.type === \"given\" && commission > 0) {\n      totalAmount = totalAmount * (1 + commission / 100);\n    }\n    \n    const transaction: Transaction = { \n      ...insertTransaction,\n      id,\n      notes: insertTransaction.notes || null,\n      ratePerPoint: insertTransaction.ratePerPoint.toString(),\n      commissionPercentage: insertTransaction.commissionPercentage ? insertTransaction.commissionPercentage.toString() : null,\n      totalAmount: totalAmount.toFixed(2),\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.transactions.set(id, transaction);\n    return transaction;\n  }\n\n  async updateTransaction(id: string, transactionData: Partial<InsertTransaction>): Promise<Transaction> {\n    const transaction = this.transactions.get(id);\n    if (!transaction) throw new Error(\"Transaction not found\");\n    \n    // Convert numeric fields to strings and handle null/undefined properly\n    const convertedData: Partial<Transaction> = {};\n    \n    // Copy all properties except the ones we need to convert\n    Object.keys(transactionData).forEach(key => {\n      if (key !== 'ratePerPoint' && key !== 'commissionPercentage') {\n        (convertedData as any)[key] = (transactionData as any)[key];\n      }\n    });\n    \n    if (transactionData.ratePerPoint !== undefined) {\n      convertedData.ratePerPoint = transactionData.ratePerPoint.toString();\n    }\n    if (transactionData.commissionPercentage !== undefined) {\n      convertedData.commissionPercentage = transactionData.commissionPercentage ? transactionData.commissionPercentage.toString() : null;\n    }\n    \n    const updatedTransaction = { ...transaction, ...convertedData, updatedAt: new Date() };\n    this.transactions.set(id, updatedTransaction);\n    return updatedTransaction;\n  }\n\n  async deleteTransaction(id: string): Promise<boolean> {\n    return this.transactions.delete(id);\n  }\n\n  // Ledger methods\n  async getLedgerEntry(id: string): Promise<LedgerEntry | undefined> {\n    return this.ledgerEntries.get(id);\n  }\n\n  async getAllLedgerEntries(): Promise<LedgerEntry[]> {\n    return Array.from(this.ledgerEntries.values());\n  }\n\n  async getLedgerEntriesByPeriod(period: string): Promise<LedgerEntry[]> {\n    return Array.from(this.ledgerEntries.values()).filter(e => e.period === period);\n  }\n\n  async createLedgerEntry(entry: LedgerEntry): Promise<LedgerEntry> {\n    this.ledgerEntries.set(entry.id, entry);\n    return entry;\n  }\n\n  async updateLedgerEntry(id: string, entryData: Partial<LedgerEntry>): Promise<LedgerEntry> {\n    const entry = this.ledgerEntries.get(id);\n    if (!entry) throw new Error(\"Ledger entry not found\");\n    \n    const updatedEntry = { ...entry, ...entryData };\n    this.ledgerEntries.set(id, updatedEntry);\n    return updatedEntry;\n  }\n\n  async deleteLedgerEntry(id: string): Promise<boolean> {\n    return this.ledgerEntries.delete(id);\n  }\n\n  // Settlement methods\n  async getSettlement(id: string): Promise<Settlement | undefined> {\n    return this.settlements.get(id);\n  }\n\n  async getAllSettlements(): Promise<Settlement[]> {\n    return Array.from(this.settlements.values());\n  }\n\n  async getSettlementsByProfile(profileId: string): Promise<Settlement[]> {\n    return Array.from(this.settlements.values()).filter(s => s.profileId === profileId);\n  }\n\n  async createSettlement(settlement: Settlement): Promise<Settlement> {\n    this.settlements.set(settlement.id, settlement);\n    return settlement;\n  }\n\n  async updateSettlement(id: string, settlementData: Partial<Settlement>): Promise<Settlement> {\n    const settlement = this.settlements.get(id);\n    if (!settlement) throw new Error(\"Settlement not found\");\n    \n    const updatedSettlement = { ...settlement, ...settlementData };\n    this.settlements.set(id, updatedSettlement);\n    return updatedSettlement;\n  }\n\n  // Audit log methods\n  async createAuditLog(insertLog: InsertAuditLog): Promise<AuditLog> {\n    const id = randomUUID();\n    const log: AuditLog = { \n      ...insertLog, \n      id,\n      resourceId: insertLog.resourceId || null,\n      ipAddress: insertLog.ipAddress || null,\n      createdAt: new Date()\n    };\n    this.auditLogs.set(id, log);\n    return log;\n  }\n\n  async getAuditLogs(): Promise<AuditLog[]> {\n    return Array.from(this.auditLogs.values()).sort((a, b) => {\n      const aTime = a.createdAt?.getTime() || 0;\n      const bTime = b.createdAt?.getTime() || 0;\n      return bTime - aTime;\n    });\n  }\n\n  async getAuditLogsByUser(userId: string): Promise<AuditLog[]> {\n    return Array.from(this.auditLogs.values()).filter(l => l.userId === userId);\n  }\n\n  async getAuditLogsByDateRange(startDate: Date, endDate: Date): Promise<AuditLog[]> {\n    return Array.from(this.auditLogs.values()).filter(l => \n      l.createdAt && l.createdAt >= startDate && l.createdAt <= endDate\n    );\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":18238},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, decimal, integer, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: text(\"role\").notNull(), // 'bookie' | 'assistant'\n  isActive: boolean(\"is_active\").default(true),\n  lastLogin: timestamp(\"last_login\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const profiles = pgTable(\"profiles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  type: text(\"type\").notNull(), // 'uplink' | 'downline'\n  name: text(\"name\").notNull(),\n  phone: text(\"phone\").notNull().unique(),\n  email: text(\"email\"),\n  ratePerPoint: decimal(\"rate_per_point\", { precision: 10, scale: 2 }).notNull(),\n  commissionPercentage: decimal(\"commission_percentage\", { precision: 5, scale: 2 }),\n  notes: text(\"notes\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const transactions = pgTable(\"transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  type: text(\"type\").notNull(), // 'taken' | 'given'\n  profileId: varchar(\"profile_id\").notNull(),\n  date: timestamp(\"date\").notNull(),\n  points: integer(\"points\").notNull(),\n  ratePerPoint: decimal(\"rate_per_point\", { precision: 10, scale: 2 }).notNull(),\n  commissionPercentage: decimal(\"commission_percentage\", { precision: 5, scale: 2 }),\n  totalAmount: decimal(\"total_amount\", { precision: 12, scale: 2 }).notNull(),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const ledgerEntries = pgTable(\"ledger_entries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  profileId: varchar(\"profile_id\").notNull(),\n  period: text(\"period\").notNull(), // e.g., \"2024-01-08_2024-01-14\"\n  totalPoints: integer(\"total_points\").notNull(),\n  averageRate: decimal(\"average_rate\", { precision: 10, scale: 2 }).notNull(),\n  commission: decimal(\"commission\", { precision: 12, scale: 2 }),\n  balance: decimal(\"balance\", { precision: 12, scale: 2 }).notNull(),\n  status: text(\"status\").notNull(), // 'pending' | 'settled'\n  calculatedAt: timestamp(\"calculated_at\").defaultNow(),\n});\n\nexport const settlements = pgTable(\"settlements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  profileId: varchar(\"profile_id\").notNull(),\n  period: text(\"period\").notNull(),\n  amount: decimal(\"amount\", { precision: 12, scale: 2 }).notNull(),\n  message: text(\"message\").notNull(),\n  status: text(\"status\").notNull(), // 'sent' | 'pending' | 'failed'\n  sentAt: timestamp(\"sent_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const auditLogs = pgTable(\"audit_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  action: text(\"action\").notNull(), // 'CREATE' | 'UPDATE' | 'DELETE' | 'LOGIN' | 'CALCULATE'\n  resource: text(\"resource\").notNull(), // 'Profile' | 'Transaction' | 'Ledger' | 'System'\n  resourceId: varchar(\"resource_id\"),\n  details: text(\"details\").notNull(),\n  ipAddress: text(\"ip_address\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  lastLogin: true,\n}).extend({\n  password: z.string().min(8, \"Password must be at least 8 characters\"),\n  role: z.enum([\"bookie\", \"assistant\"]),\n});\n\nexport const insertProfileSchema = createInsertSchema(profiles).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  type: z.enum([\"uplink\", \"downline\"]),\n  name: z.string().min(3, \"Name must be at least 3 characters\"),\n  phone: z.string().regex(/^\\+\\d{10,15}$/, \"Invalid phone number format\"),\n  email: z.string().email().optional().or(z.literal(\"\")),\n  ratePerPoint: z.union([z.string(), z.number()]).transform(val => typeof val === 'string' ? parseFloat(val) : val),\n  commissionPercentage: z.union([z.string(), z.number()]).optional().transform(val => val ? (typeof val === 'string' ? parseFloat(val) : val) : undefined),\n});\n\nexport const insertTransactionSchema = createInsertSchema(transactions).omit({\n  id: true,\n  totalAmount: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  type: z.enum([\"taken\", \"given\"]),\n  profileId: z.string().min(1, \"Profile is required\"),\n  date: z.string().transform(val => new Date(val)),\n  points: z.union([z.string(), z.number()]).transform(val => typeof val === 'string' ? parseInt(val) : val),\n  ratePerPoint: z.union([z.string(), z.number()]).transform(val => typeof val === 'string' ? parseFloat(val) : val),\n  commissionPercentage: z.union([z.string(), z.number()]).optional().transform(val => val ? (typeof val === 'string' ? parseFloat(val) : val) : undefined),\n});\n\nexport const insertSettlementSchema = createInsertSchema(settlements).omit({\n  id: true,\n  createdAt: true,\n  sentAt: true,\n}).extend({\n  amount: z.string().transform(val => parseFloat(val)),\n  status: z.enum([\"sent\", \"pending\", \"failed\"]),\n});\n\nexport const insertAuditLogSchema = createInsertSchema(auditLogs).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  action: z.enum([\"CREATE\", \"UPDATE\", \"DELETE\", \"LOGIN\", \"CALCULATE\"]),\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type UserPublic = Omit<User, 'password'>;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Profile = typeof profiles.$inferSelect;\nexport type InsertProfile = z.infer<typeof insertProfileSchema>;\n\nexport type Transaction = typeof transactions.$inferSelect;\nexport type InsertTransaction = z.infer<typeof insertTransactionSchema>;\n\nexport type LedgerEntry = typeof ledgerEntries.$inferSelect;\nexport type InsertLedgerEntry = typeof ledgerEntries.$inferInsert;\n\nexport type Settlement = typeof settlements.$inferSelect;\nexport type InsertSettlement = z.infer<typeof insertSettlementSchema>;\n\nexport type AuditLog = typeof auditLogs.$inferSelect;\nexport type InsertAuditLog = z.infer<typeof insertAuditLogSchema>;\n","size_bytes":6371},"client/src/App.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Switch, Route, useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport MobileHeader from \"@/components/layout/mobile-header\";\nimport NotFound from \"@/pages/not-found\";\n\n// Import all pages\nimport Landing from \"@/pages/landing\";\nimport Login from \"@/pages/login\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Profiles from \"@/pages/profiles\";\nimport Transactions from \"@/pages/transactions\";\nimport Ledger from \"@/pages/ledger\";\nimport Settlement from \"@/pages/settlement\";\nimport Reports from \"@/pages/reports\";\nimport Users from \"@/pages/users\";\nimport Audit from \"@/pages/audit\";\n\nfunction ProtectedRoute({ component: Component }: { component: React.ComponentType }) {\n  const [, setLocation] = useLocation();\n  const isLoggedIn = localStorage.getItem(\"isLoggedIn\") === \"true\";\n\n  useEffect(() => {\n    if (!isLoggedIn) {\n      setLocation(\"/login\");\n    }\n  }, [isLoggedIn, setLocation]);\n\n  if (!isLoggedIn) {\n    return null;\n  }\n\n  return <Component />;\n}\n\nfunction AuthenticatedApp() {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n\n  const handleToggleSidebar = () => {\n    setIsSidebarOpen(!isSidebarOpen);\n  };\n\n  const handleCloseSidebar = () => {\n    setIsSidebarOpen(false);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      {/* Mobile Header */}\n      <MobileHeader onMenuClick={handleToggleSidebar} />\n\n      <div className=\"flex\">\n        {/* Sidebar */}\n        <Sidebar isOpen={isSidebarOpen} onClose={handleCloseSidebar} />\n\n        {/* Main Content */}\n        <main className=\"flex-1 md:ml-0 min-h-screen\">\n          <Switch>\n            <Route path=\"/dashboard\" component={() => <ProtectedRoute component={Dashboard} />} />\n            <Route path=\"/profiles\" component={() => <ProtectedRoute component={Profiles} />} />\n            <Route path=\"/transactions\" component={() => <ProtectedRoute component={Transactions} />} />\n            <Route path=\"/ledger\" component={() => <ProtectedRoute component={Ledger} />} />\n            <Route path=\"/settlement\" component={() => <ProtectedRoute component={Settlement} />} />\n            <Route path=\"/reports\" component={() => <ProtectedRoute component={Reports} />} />\n            <Route path=\"/users\" component={() => <ProtectedRoute component={Users} />} />\n            <Route path=\"/audit\" component={() => <ProtectedRoute component={Audit} />} />\n            <Route component={NotFound} />\n          </Switch>\n        </main>\n      </div>\n    </div>\n  );\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Landing} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/dashboard\" component={AuthenticatedApp} />\n      <Route path=\"/profiles\" component={AuthenticatedApp} />\n      <Route path=\"/transactions\" component={AuthenticatedApp} />\n      <Route path=\"/ledger\" component={AuthenticatedApp} />\n      <Route path=\"/settlement\" component={AuthenticatedApp} />\n      <Route path=\"/reports\" component={AuthenticatedApp} />\n      <Route path=\"/users\" component={AuthenticatedApp} />\n      <Route path=\"/audit\" component={AuthenticatedApp} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3701},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":5055},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/mock-data.ts":{"content":"import { Profile, Transaction, LedgerEntry, Settlement, AuditLog, User } from \"@shared/schema\";\n\nexport const mockProfiles: Profile[] = [\n  {\n    id: \"1\",\n    type: \"uplink\",\n    name: \"Super Exchange\",\n    phone: \"+919876543210\",\n    email: \"super@exchange.com\",\n    ratePerPoint: \"1.50\",\n    commissionPercentage: null,\n    notes: \"Primary uplink\",\n    isActive: true,\n    createdAt: new Date(\"2024-01-01\"),\n    updatedAt: new Date(\"2024-01-01\"),\n  },\n  {\n    id: \"2\",\n    type: \"downline\",\n    name: \"Agent Kumar\",\n    phone: \"+918765432109\",\n    email: \"kumar.agent@gmail.com\",\n    ratePerPoint: \"1.65\",\n    commissionPercentage: \"5.00\",\n    notes: \"Cricket specialist\",\n    isActive: true,\n    createdAt: new Date(\"2024-01-02\"),\n    updatedAt: new Date(\"2024-01-02\"),\n  },\n  {\n    id: \"3\",\n    type: \"downline\",\n    name: \"Agent Sharma\",\n    phone: \"+917654321098\",\n    email: \"sharma.bets@yahoo.com\",\n    ratePerPoint: \"1.70\",\n    commissionPercentage: \"8.00\",\n    notes: \"Multi-sport agent\",\n    isActive: true,\n    createdAt: new Date(\"2024-01-03\"),\n    updatedAt: new Date(\"2024-01-03\"),\n  },\n];\n\nexport const mockTransactions: Transaction[] = [\n  {\n    id: \"1\",\n    type: \"taken\",\n    profileId: \"1\",\n    date: new Date(\"2024-01-15\"),\n    points: 50000,\n    ratePerPoint: \"1.50\",\n    commissionPercentage: null,\n    totalAmount: \"75000.00\",\n    notes: null,\n    createdAt: new Date(\"2024-01-15\"),\n    updatedAt: new Date(\"2024-01-15\"),\n  },\n  {\n    id: \"2\",\n    type: \"given\",\n    profileId: \"2\",\n    date: new Date(\"2024-01-15\"),\n    points: 25000,\n    ratePerPoint: \"1.65\",\n    commissionPercentage: \"5.00\",\n    totalAmount: \"43125.00\",\n    notes: null,\n    createdAt: new Date(\"2024-01-15\"),\n    updatedAt: new Date(\"2024-01-15\"),\n  },\n  {\n    id: \"3\",\n    type: \"given\",\n    profileId: \"3\",\n    date: new Date(\"2024-01-14\"),\n    points: 15000,\n    ratePerPoint: \"1.70\",\n    commissionPercentage: \"8.00\",\n    totalAmount: \"27540.00\",\n    notes: null,\n    createdAt: new Date(\"2024-01-14\"),\n    updatedAt: new Date(\"2024-01-14\"),\n  },\n  {\n    id: \"4\",\n    type: \"taken\",\n    profileId: \"1\",\n    date: new Date(\"2024-01-13\"),\n    points: 100000,\n    ratePerPoint: \"1.50\",\n    commissionPercentage: null,\n    totalAmount: \"150000.00\",\n    notes: null,\n    createdAt: new Date(\"2024-01-13\"),\n    updatedAt: new Date(\"2024-01-13\"),\n  },\n];\n\nexport const mockUsers: User[] = [\n  {\n    id: \"1\",\n    username: \"admin\",\n    email: \"admin@bookie.com\",\n    password: \"hashed_password\",\n    role: \"bookie\",\n    isActive: true,\n    lastLogin: new Date(\"2024-01-15T09:30:00\"),\n    createdAt: new Date(\"2024-01-01\"),\n  },\n  {\n    id: \"2\",\n    username: \"assistant1\",\n    email: \"assistant@bookie.com\",\n    password: \"hashed_password\",\n    role: \"assistant\",\n    isActive: true,\n    lastLogin: new Date(\"2024-01-14T18:15:00\"),\n    createdAt: new Date(\"2024-01-01\"),\n  },\n];\n\nexport const mockLedgerEntries: LedgerEntry[] = [\n  {\n    id: \"1\",\n    profileId: \"1\",\n    period: \"2024-01-08_2024-01-14\",\n    totalPoints: 150000,\n    averageRate: \"1.50\",\n    commission: null,\n    balance: \"-225000.00\",\n    status: \"pending\",\n    calculatedAt: new Date(\"2024-01-15T09:00:00\"),\n  },\n  {\n    id: \"2\",\n    profileId: \"2\",\n    period: \"2024-01-08_2024-01-14\",\n    totalPoints: 25000,\n    averageRate: \"1.65\",\n    commission: \"2156.25\",\n    balance: \"43125.00\",\n    status: \"pending\",\n    calculatedAt: new Date(\"2024-01-15T09:00:00\"),\n  },\n  {\n    id: \"3\",\n    profileId: \"3\",\n    period: \"2024-01-08_2024-01-14\",\n    totalPoints: 15000,\n    averageRate: \"1.70\",\n    commission: \"2040.00\",\n    balance: \"27540.00\",\n    status: \"pending\",\n    calculatedAt: new Date(\"2024-01-15T09:00:00\"),\n  },\n];\n\nexport const mockSettlements: Settlement[] = [\n  {\n    id: \"1\",\n    profileId: \"1\",\n    period: \"2024-01-08_2024-01-14\",\n    amount: \"225000.00\",\n    message: \"Settlement Report for Jan 8-14, 2024\\n\\nBalance: ₹2,25,000\\nStatus: Pending Payment\\n\\nThank you for your business.\\n- Bookie System\",\n    status: \"sent\",\n    sentAt: new Date(\"2024-01-15T09:00:00\"),\n    createdAt: new Date(\"2024-01-15T09:00:00\"),\n  },\n  {\n    id: \"2\",\n    profileId: \"2\",\n    period: \"2024-01-08_2024-01-14\",\n    amount: \"43125.00\",\n    message: \"Settlement Report for Jan 8-14, 2024\\n\\nBalance: ₹43,125\\nStatus: Pending Payment\\n\\nThank you for your business.\\n- Bookie System\",\n    status: \"sent\",\n    sentAt: new Date(\"2024-01-15T09:00:00\"),\n    createdAt: new Date(\"2024-01-15T09:00:00\"),\n  },\n  {\n    id: \"3\",\n    profileId: \"3\",\n    period: \"2024-01-08_2024-01-14\",\n    amount: \"27540.00\",\n    message: \"Settlement Report for Jan 8-14, 2024\\n\\nBalance: ₹27,540\\nStatus: Pending Payment\\n\\nThank you for your business.\\n- Bookie System\",\n    status: \"pending\",\n    sentAt: null,\n    createdAt: new Date(\"2024-01-15T09:00:00\"),\n  },\n];\n\nexport const mockAuditLogs: AuditLog[] = [\n  {\n    id: \"1\",\n    userId: \"1\",\n    action: \"CREATE\",\n    resource: \"Transaction\",\n    resourceId: \"1\",\n    details: \"Created transaction #T-2024-0115-001\",\n    ipAddress: \"192.168.1.100\",\n    createdAt: new Date(\"2024-01-15T09:45:23\"),\n  },\n  {\n    id: \"2\",\n    userId: \"1\",\n    action: \"LOGIN\",\n    resource: \"System\",\n    resourceId: null,\n    details: \"User logged in successfully\",\n    ipAddress: \"192.168.1.100\",\n    createdAt: new Date(\"2024-01-15T09:30:12\"),\n  },\n  {\n    id: \"3\",\n    userId: \"2\",\n    action: \"UPDATE\",\n    resource: \"Profile\",\n    resourceId: \"2\",\n    details: \"Updated Agent Kumar profile\",\n    ipAddress: \"192.168.1.101\",\n    createdAt: new Date(\"2024-01-14T18:15:45\"),\n  },\n  {\n    id: \"4\",\n    userId: \"1\",\n    action: \"CALCULATE\",\n    resource: \"Ledger\",\n    resourceId: null,\n    details: \"Triggered manual ledger calculation\",\n    ipAddress: \"192.168.1.100\",\n    createdAt: new Date(\"2024-01-14T17:30:22\"),\n  },\n];\n","size_bytes":5804},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/audit.tsx":{"content":"import { useState } from \"react\";\nimport { Filter, Loader2 } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport DataTable from \"@/components/tables/data-table\";\nimport { type AuditLog, type UserPublic } from \"@shared/schema\";\n\nexport default function Audit() {\n  const [dateFrom, setDateFrom] = useState(\"\");\n  const [dateTo, setDateTo] = useState(\"\");\n  const [actionFilter, setActionFilter] = useState(\"all\");\n  const [userFilter, setUserFilter] = useState(\"all\");\n\n  // Fetch users for filter dropdown\n  const { data: users = [] } = useQuery<UserPublic[]>({\n    queryKey: [\"/api/users\"],\n  });\n\n  // Build query parameters for audit logs\n  const buildAuditQuery = () => {\n    const params = new URLSearchParams();\n    if (dateFrom) params.append('startDate', dateFrom);\n    if (dateTo) params.append('endDate', dateTo);\n    if (actionFilter !== \"all\") params.append('action', actionFilter);\n    if (userFilter !== \"all\") params.append('userId', userFilter);\n    params.append('page', '1');\n    params.append('limit', '100');\n    return params.toString();\n  };\n\n  // Fetch audit logs with current filters\n  const { data: auditResponse, isLoading } = useQuery({\n    queryKey: [\"/api/audit\", dateFrom, dateTo, actionFilter, userFilter],\n    queryFn: async () => {\n      const queryString = buildAuditQuery();\n      const response = await fetch(`/api/audit?${queryString}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch audit logs');\n      }\n      return response.json();\n    },\n  });\n\n  // Transform audit logs to ensure dates are Date objects\n  const auditLogs = auditResponse?.data?.map(log => ({\n    ...log,\n    createdAt: new Date(log.createdAt)\n  })) || [];\n  const pagination = auditResponse?.pagination;\n\n  const handleClearFilters = () => {\n    setDateFrom(\"\");\n    setDateTo(\"\");\n    setActionFilter(\"all\");\n    setUserFilter(\"all\");\n  };\n\n  const getActionBadgeColor = (action: string) => {\n    const colors = {\n      CREATE: \"bg-green-100 text-green-600\",\n      UPDATE: \"bg-yellow-100 text-yellow-600\", \n      DELETE: \"bg-red-100 text-red-600\",\n      LOGIN: \"bg-blue-100 text-blue-600\",\n      CALCULATE: \"bg-purple-100 text-purple-600\",\n    };\n    return colors[action as keyof typeof colors] || \"bg-gray-100 text-gray-600\";\n  };\n\n  const columns = [\n    {\n      key: \"createdAt\",\n      title: \"Timestamp\",\n      render: (value: Date) => (\n        <div className=\"text-sm\" data-testid={`audit-timestamp-${value.getTime()}`}>\n          {value.toLocaleDateString(\"en-IN\")} {value.toLocaleTimeString(\"en-IN\", {\n            hour: \"2-digit\",\n            minute: \"2-digit\",\n            second: \"2-digit\"\n          })}\n        </div>\n      ),\n    },\n    {\n      key: \"userId\",\n      title: \"User\",\n      render: (value: string) => {\n        const user = users.find(u => u.id === value);\n        return (\n          <div className=\"font-medium\" data-testid={`audit-user-${value}`}>\n            {user?.username || \"Unknown\"}\n          </div>\n        );\n      },\n    },\n    {\n      key: \"action\",\n      title: \"Action\",\n      render: (value: string) => (\n        <Badge \n          variant=\"outline\"\n          className={getActionBadgeColor(value)}\n          data-testid={`audit-action-${value}`}\n        >\n          {value}\n        </Badge>\n      ),\n    },\n    {\n      key: \"resource\",\n      title: \"Resource\",\n      render: (value: string) => (\n        <div className=\"text-sm\" data-testid=\"audit-resource\">\n          {value}\n        </div>\n      ),\n    },\n    {\n      key: \"details\",\n      title: \"Details\",\n      render: (value: string) => (\n        <div className=\"text-sm max-w-xs truncate\" data-testid=\"audit-details\" title={value}>\n          {value}\n        </div>\n      ),\n    },\n    {\n      key: \"ipAddress\",\n      title: \"IP Address\",\n      render: (value: string | null) => (\n        <div className=\"text-sm font-mono\" data-testid=\"audit-ip\">\n          {value || \"-\"}\n        </div>\n      ),\n    },\n  ];\n\n  return (\n    <div className=\"p-4 md:p-6\" data-testid=\"audit-page\">\n      <div className=\"mb-6\">\n        <h2 className=\"text-2xl font-bold mb-2\" data-testid=\"audit-title\">\n          Audit Trail\n        </h2>\n        <p className=\"text-muted-foreground\" data-testid=\"audit-description\">\n          Track all system activities and changes\n        </p>\n      </div>\n\n      {/* Audit Filters */}\n      <Card className=\"mb-6\">\n        <CardContent className=\"p-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n            <div>\n              <Label htmlFor=\"date-from\">Date From</Label>\n              <Input\n                id=\"date-from\"\n                type=\"date\"\n                className=\"mt-2\"\n                value={dateFrom}\n                onChange={(e) => setDateFrom(e.target.value)}\n                data-testid=\"audit-date-from-input\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"date-to\">Date To</Label>\n              <Input\n                id=\"date-to\"\n                type=\"date\"\n                className=\"mt-2\"\n                value={dateTo}\n                onChange={(e) => setDateTo(e.target.value)}\n                data-testid=\"audit-date-to-input\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"action-filter\">Action</Label>\n              <Select value={actionFilter} onValueChange={setActionFilter}>\n                <SelectTrigger className=\"mt-2\" data-testid=\"audit-action-filter\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Actions</SelectItem>\n                  <SelectItem value=\"CREATE\">Create</SelectItem>\n                  <SelectItem value=\"UPDATE\">Update</SelectItem>\n                  <SelectItem value=\"DELETE\">Delete</SelectItem>\n                  <SelectItem value=\"LOGIN\">Login</SelectItem>\n                  <SelectItem value=\"CALCULATE\">Calculate</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"user-filter\">User</Label>\n              <Select value={userFilter} onValueChange={setUserFilter}>\n                <SelectTrigger className=\"mt-2\" data-testid=\"audit-user-filter\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Users</SelectItem>\n                  {users.map((user) => (\n                    <SelectItem key={user.id} value={user.id}>\n                      {user.username}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"flex items-end\">\n              <Button\n                variant=\"secondary\"\n                className=\"w-full mt-2\"\n                onClick={handleClearFilters}\n                data-testid=\"audit-clear-filters-button\"\n              >\n                <Filter className=\"w-4 h-4 mr-2\" />\n                Clear Filters\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Audit Log Table */}\n      {isLoading ? (\n        <div className=\"flex items-center justify-center py-8\" data-testid=\"audit-loading\">\n          <Loader2 className=\"h-6 w-6 animate-spin mr-2\" />\n          <span>Loading audit logs...</span>\n        </div>\n      ) : (\n        <DataTable\n          data={auditLogs}\n          columns={columns}\n          testId=\"audit-log-table\"\n        />\n      )}\n      \n      {pagination && (\n        <div className=\"mt-4 text-sm text-muted-foreground text-center\" data-testid=\"audit-pagination-info\">\n          Showing {pagination.page === 1 ? 1 : (pagination.page - 1) * pagination.limit + 1} to{\" \"}\n          {Math.min(pagination.page * pagination.limit, pagination.total)} of {pagination.total} entries\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":8293},"client/src/pages/dashboard.tsx":{"content":"import { \n  TrendingDown, \n  TrendingUp, \n  Clock, \n  TrendingUpIcon,\n  Eye \n} from \"lucide-react\";\nimport StatCard from \"@/components/cards/stat-card\";\nimport DataTable from \"@/components/tables/data-table\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { type Transaction, type Profile } from \"@shared/schema\";\nimport { useMemo } from \"react\";\n\nexport default function Dashboard() {\n  const [, setLocation] = useLocation();\n\n  // Fetch real data from APIs\n  const { data: transactions = [], isLoading: transactionsLoading } = useQuery<Transaction[]>({\n    queryKey: [\"/api/transactions\"],\n  });\n\n  const { data: profiles = [], isLoading: profilesLoading } = useQuery<Profile[]>({\n    queryKey: [\"/api/profiles\"],\n  });\n\n  // Calculate real stats from actual data\n  const stats = useMemo(() => {\n    // Always calculate profile counts even if no transactions\n    const uplinksCount = profiles.filter(p => p.type === \"uplink\").length;\n    const downlinesCount = profiles.filter(p => p.type === \"downline\").length;\n    \n    // Transaction stats only calculated if transactions exist\n    const totalTransactions = transactions.length;\n    const totalAmount = transactions.reduce((sum, t) => sum + parseFloat(t.totalAmount), 0);\n    \n    // Get recent transactions (last 3) \n    const sortedTransactions = [...transactions].sort((a, b) => {\n      const dateA = new Date(a.date);\n      const dateB = new Date(b.date);\n      return dateB.getTime() - dateA.getTime();\n    });\n    const recentTransactions = sortedTransactions.slice(0, 3);\n\n\n    return {\n      totalTransactions,\n      totalAmount,\n      uplinksCount,\n      downlinesCount,\n      recentTransactions\n    };\n  }, [transactions, profiles]);\n\n  const columns = [\n    {\n      key: \"date\",\n      title: \"Date\",\n      render: (value: Date | string) => {\n        const date = value instanceof Date ? value : new Date(value);\n        return date.toLocaleDateString(\"en-IN\");\n      },\n    },\n    {\n      key: \"type\",\n      title: \"Type\",\n      render: (value: string) => (\n        <Badge \n          variant={value === \"taken\" ? \"default\" : \"secondary\"}\n          className={\n            value === \"taken\" \n              ? \"bg-primary/10 text-primary\" \n              : \"bg-green-100 text-green-600\"\n          }\n        >\n          {value === \"taken\" ? (\n            <>\n              <TrendingDown className=\"w-3 h-3 mr-1\" />\n              Taken\n            </>\n          ) : (\n            <>\n              <TrendingUp className=\"w-3 h-3 mr-1\" />\n              Given\n            </>\n          )}\n        </Badge>\n      ),\n    },\n    {\n      key: \"profileId\",\n      title: \"Profile\",\n      render: (value: string) => {\n        const profile = profiles.find(p => p.id === value);\n        return profile?.name || \"Unknown\";\n      },\n    },\n    {\n      key: \"points\",\n      title: \"Points\",\n      align: \"right\" as const,\n      render: (value: number) => value.toLocaleString(\"en-IN\"),\n    },\n    {\n      key: \"totalAmount\",\n      title: \"Amount\",\n      align: \"right\" as const,\n      render: (value: string) => `₹${parseFloat(value).toLocaleString(\"en-IN\")}`,\n    },\n  ];\n\n  return (\n    <div className=\"p-4 md:p-6\" data-testid=\"dashboard-page\">\n      <div className=\"mb-6\">\n        <h2 className=\"text-2xl font-bold mb-2\" data-testid=\"dashboard-title\">\n          Dashboard\n        </h2>\n        <p className=\"text-muted-foreground\" data-testid=\"dashboard-description\">\n          Overview of your inventory management system\n        </p>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n        <StatCard\n          title=\"Total Transactions\"\n          value={transactionsLoading ? \"...\" : stats.totalTransactions.toString()}\n          icon={Clock}\n          iconColor=\"text-primary\"\n          iconBgColor=\"bg-primary/10\"\n          valueColor=\"text-primary\"\n        />\n        <StatCard\n          title=\"Total Amount\"\n          value={transactionsLoading ? \"...\" : `₹${stats.totalAmount.toLocaleString(\"en-IN\")}`}\n          icon={TrendingUpIcon}\n          iconColor=\"text-green-600\"\n          iconBgColor=\"bg-green-100\"\n          valueColor=\"text-green-600\"\n        />\n        <StatCard\n          title=\"Active Uplinks\"\n          value={profilesLoading ? \"...\" : stats.uplinksCount.toString()}\n          icon={TrendingUp}\n          iconColor=\"text-blue-600\"\n          iconBgColor=\"bg-blue-100\"\n          valueColor=\"text-blue-600\"\n        />\n        <StatCard\n          title=\"Active Downlines\"\n          value={profilesLoading ? \"...\" : stats.downlinesCount.toString()}\n          icon={TrendingDown}\n          iconColor=\"text-purple-600\"\n          iconBgColor=\"bg-purple-100\"\n          valueColor=\"text-purple-600\"\n        />\n      </div>\n\n      {/* Recent Transactions */}\n      <Card data-testid=\"recent-transactions-card\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle data-testid=\"recent-transactions-title\">\n              Recent Transactions\n            </CardTitle>\n            <Button\n              variant=\"link\"\n              onClick={() => setLocation(\"/transactions\")}\n              data-testid=\"view-all-transactions-button\"\n            >\n              <Eye className=\"w-4 h-4 mr-1\" />\n              View All\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          <DataTable\n            data={stats.recentTransactions}\n            columns={columns}\n            itemsPerPage={10}\n            testId=\"recent-transactions-table\"\n          />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5868},"client/src/pages/landing.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { \n  TrendingUp, \n  Calculator, \n  Send, \n  Shield, \n  BarChart3, \n  Smartphone,\n  CheckCircle,\n  ArrowRight\n} from \"lucide-react\";\n\nexport default function Landing() {\n  const [, setLocation] = useLocation();\n\n  const features = [\n    {\n      icon: TrendingUp,\n      title: \"Inventory Management\",\n      description: \"Track uplink and downline inventory with automated calculations\"\n    },\n    {\n      icon: Calculator,\n      title: \"Automated Ledger\",\n      description: \"Automatic balance calculations and profit/loss reports\"\n    },\n    {\n      icon: Send,\n      title: \"WhatsApp Integration\",\n      description: \"Send settlement reports directly via WhatsApp\"\n    },\n    {\n      icon: BarChart3,\n      title: \"Custom Reports\",\n      description: \"Generate detailed reports for any date range\"\n    },\n    {\n      icon: Shield,\n      title: \"Audit Trail\",\n      description: \"Complete tracking of all system activities\"\n    },\n    {\n      icon: Smartphone,\n      title: \"Mobile Responsive\",\n      description: \"Access your system from any device, anywhere\"\n    }\n  ];\n\n  const benefits = [\n    \"Replace manual Excel tracking\",\n    \"Automate weekly settlements\",\n    \"Real-time balance visibility\",\n    \"Secure role-based access\",\n    \"Complete transaction history\",\n    \"Professional reporting\"\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary/5 via-background to-secondary/5\" data-testid=\"landing-page\">\n      {/* Header */}\n      <header className=\"border-b border-border/40 bg-background/80 backdrop-blur-sm sticky top-0 z-50\">\n        <div className=\"container mx-auto px-4 py-4 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n              <TrendingUp className=\"w-5 h-5 text-primary-foreground\" />\n            </div>\n            <h1 className=\"text-xl font-bold text-primary\" data-testid=\"brand-title\">\n              Bookie System\n            </h1>\n          </div>\n          <Button \n            onClick={() => setLocation(\"/login\")}\n            data-testid=\"login-button\"\n          >\n            Login\n          </Button>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"container mx-auto px-4 py-16 text-center\">\n        <div className=\"max-w-4xl mx-auto\">\n          <h1 className=\"text-4xl md:text-6xl font-bold mb-6 bg-gradient-to-r from-primary to-primary/60 bg-clip-text text-transparent\" data-testid=\"hero-title\">\n            Digitize Your Bookie Operations\n          </h1>\n          <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\" data-testid=\"hero-description\">\n            Replace manual Excel tracking with automated inventory management, \n            real-time calculations, and WhatsApp settlement integration.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button \n              size=\"lg\" \n              onClick={() => setLocation(\"/login\")}\n              className=\"text-lg px-8 py-6\"\n              data-testid=\"get-started-button\"\n            >\n              Get Started\n              <ArrowRight className=\"w-5 h-5 ml-2\" />\n            </Button>\n            <Button \n              variant=\"outline\" \n              size=\"lg\"\n              className=\"text-lg px-8 py-6\"\n              data-testid=\"learn-more-button\"\n            >\n              Learn More\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Grid */}\n      <section className=\"container mx-auto px-4 py-16\" data-testid=\"features-section\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl font-bold mb-4\" data-testid=\"features-title\">\n            Powerful Features\n          </h2>\n          <p className=\"text-muted-foreground text-lg max-w-2xl mx-auto\">\n            Everything you need to manage your cricket ID and betting inventory operations efficiently.\n          </p>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {features.map((feature, index) => {\n            const Icon = feature.icon;\n            return (\n              <Card key={index} className=\"border-border/50 hover:shadow-lg transition-shadow\" data-testid={`feature-card-${index}`}>\n                <CardHeader>\n                  <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mb-4\">\n                    <Icon className=\"w-6 h-6 text-primary\" />\n                  </div>\n                  <CardTitle className=\"text-xl\">{feature.title}</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground\">{feature.description}</p>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      </section>\n\n      {/* Benefits Section */}\n      <section className=\"bg-muted/30 py-16\" data-testid=\"benefits-section\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n            <div>\n              <h2 className=\"text-3xl font-bold mb-6\" data-testid=\"benefits-title\">\n                Why Choose Our System?\n              </h2>\n              <p className=\"text-muted-foreground text-lg mb-8\">\n                Transform your manual processes into an automated, professional operation \n                with real-time visibility and complete control.\n              </p>\n              <div className=\"space-y-4\">\n                {benefits.map((benefit, index) => (\n                  <div key={index} className=\"flex items-center space-x-3\" data-testid={`benefit-${index}`}>\n                    <CheckCircle className=\"w-5 h-5 text-green-600 flex-shrink-0\" />\n                    <span className=\"text-foreground\">{benefit}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n            \n            <Card className=\"bg-background shadow-lg\" data-testid=\"demo-card\">\n              <CardHeader>\n                <CardTitle className=\"text-2xl text-center\">Ready to Get Started?</CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-center space-y-6\">\n                <p className=\"text-muted-foreground\">\n                  Join hundreds of bookies who have already digitized their operations.\n                </p>\n                <div className=\"space-y-4\">\n                  <div className=\"text-sm text-muted-foreground\">\n                    ✓ Setup in minutes<br />\n                    ✓ No technical knowledge required<br />\n                    ✓ Full support included\n                  </div>\n                  <Button \n                    size=\"lg\" \n                    className=\"w-full\"\n                    onClick={() => setLocation(\"/login\")}\n                    data-testid=\"start-now-button\"\n                  >\n                    Start Now\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"border-t border-border/40 bg-background/80 backdrop-blur-sm py-8\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <div className=\"flex items-center justify-center space-x-2 mb-4\">\n            <div className=\"w-6 h-6 bg-primary rounded flex items-center justify-center\">\n              <TrendingUp className=\"w-4 h-4 text-primary-foreground\" />\n            </div>\n            <span className=\"font-semibold text-primary\">Bookie System</span>\n          </div>\n          <p className=\"text-muted-foreground text-sm\">\n            © 2024 Bookie Inventory Management System. All rights reserved.\n          </p>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":8054},"client/src/pages/ledger.tsx":{"content":"import { Calculator } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport DataTable from \"@/components/tables/data-table\";\nimport { type LedgerEntry, type Profile } from \"@shared/schema\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Ledger() {\n  const { toast } = useToast();\n\n  // Fetch ledger entries and profiles from API\n  const { data: ledgerEntries = [], isLoading: isLoadingLedger } = useQuery<LedgerEntry[]>({\n    queryKey: [\"/api/ledger\"],\n  });\n\n  const { data: profiles = [] } = useQuery<Profile[]>({\n    queryKey: [\"/api/profiles\"],\n  });\n\n  // Calculate ledger mutation\n  const calculateLedgerMutation = useMutation({\n    mutationFn: () => apiRequest(\"POST\", \"/api/ledger/calculate\"),\n    onSuccess: (data: any) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/ledger\"] });\n      const entriesCount = data.entriesCalculated || 0;\n      const period = data.period || \"current period\";\n      toast({\n        title: \"Success\",\n        description: `Ledger calculation completed! ${entriesCount} entries calculated for period ${period}`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to calculate ledger\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCalculateLedger = () => {\n    calculateLedgerMutation.mutate();\n  };\n\n  // Calculate totals from real data\n  const uplinksTotal = ledgerEntries\n    .filter(entry => {\n      const profile = profiles.find(p => p.id === entry.profileId);\n      return profile?.type === \"uplink\";\n    })\n    .reduce((sum, entry) => sum + Math.abs(parseFloat(entry.balance)), 0);\n\n  const downlinesTotal = ledgerEntries\n    .filter(entry => {\n      const profile = profiles.find(p => p.id === entry.profileId);\n      return profile?.type === \"downline\";\n    })\n    .reduce((sum, entry) => sum + parseFloat(entry.balance), 0);\n\n  const netProfit = downlinesTotal - uplinksTotal;\n\n  const columns = [\n    {\n      key: \"profileId\",\n      title: \"Profile\",\n      render: (value: string) => {\n        const profile = profiles.find(p => p.id === value);\n        return profile?.name || \"Unknown\";\n      },\n    },\n    {\n      key: \"profileId\",\n      title: \"Type\",\n      render: (value: string) => {\n        const profile = profiles.find(p => p.id === value);\n        return (\n          <Badge \n            variant={profile?.type === \"uplink\" ? \"default\" : \"secondary\"}\n            className={\n              profile?.type === \"uplink\" \n                ? \"bg-primary/10 text-primary\" \n                : \"bg-green-100 text-green-600\"\n            }\n            data-testid={`ledger-type-${profile?.type || \"unknown\"}`}\n          >\n            {profile?.type ? profile.type.charAt(0).toUpperCase() + profile.type.slice(1) : \"Unknown\"}\n          </Badge>\n        );\n      },\n    },\n    {\n      key: \"totalPoints\",\n      title: \"Total Points\",\n      align: \"right\" as const,\n      render: (value: number) => value.toLocaleString(\"en-IN\"),\n    },\n    {\n      key: \"averageRate\",\n      title: \"Average Rate\",\n      align: \"right\" as const,\n      render: (value: string) => `₹${parseFloat(value).toFixed(2)}`,\n    },\n    {\n      key: \"commission\",\n      title: \"Commission\",\n      align: \"right\" as const,\n      render: (value: string | null) => value ? `₹${parseFloat(value).toLocaleString(\"en-IN\")}` : \"-\",\n    },\n    {\n      key: \"balance\",\n      title: \"Balance\",\n      align: \"right\" as const,\n      render: (value: string, row: LedgerEntry) => {\n        const amount = parseFloat(value);\n        const isNegative = amount < 0;\n        const displayAmount = Math.abs(amount);\n        \n        return (\n          <span \n            className={`font-medium ${isNegative ? \"text-destructive\" : \"text-green-600\"}`}\n            data-testid={`ledger-balance-${row.id}`}\n          >\n            ₹{displayAmount.toLocaleString(\"en-IN\")} ({isNegative ? \"Owe\" : \"Receive\"})\n          </span>\n        );\n      },\n    },\n    {\n      key: \"status\",\n      title: \"Status\",\n      align: \"center\" as const,\n      render: (value: string) => (\n        <Badge \n          variant=\"outline\"\n          className=\"bg-yellow-100 text-yellow-600\"\n          data-testid={`ledger-status-${value}`}\n        >\n          {value.charAt(0).toUpperCase() + value.slice(1)}\n        </Badge>\n      ),\n    },\n  ];\n\n  return (\n    <div className=\"p-4 md:p-6\" data-testid=\"ledger-page\">\n      <div className=\"flex flex-col md:flex-row md:items-center justify-between mb-6\">\n        <div>\n          <h2 className=\"text-2xl font-bold mb-2\" data-testid=\"ledger-title\">\n            Automated Ledger\n          </h2>\n          <p className=\"text-muted-foreground\" data-testid=\"ledger-description\">\n            Balance calculations and profit/loss reports\n          </p>\n        </div>\n        <Button\n          onClick={handleCalculateLedger}\n          className=\"mt-4 md:mt-0\"\n          data-testid=\"calculate-ledger-button\"\n          disabled={calculateLedgerMutation.isPending}\n        >\n          <Calculator className=\"w-4 h-4 mr-2\" />\n          {calculateLedgerMutation.isPending ? \"Calculating...\" : \"Calculate Now\"}\n        </Button>\n      </div>\n\n      {/* Calculation Summary */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n        <Card data-testid=\"uplink-balances-card\">\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Uplink Balances</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {ledgerEntries\n                .filter(entry => {\n                  const profile = profiles.find(p => p.id === entry.profileId);\n                  return profile?.type === \"uplink\";\n                })\n                .map(entry => {\n                  const profile = profiles.find(p => p.id === entry.profileId);\n                  const amount = Math.abs(parseFloat(entry.balance));\n                  return (\n                    <div key={entry.id} className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-muted-foreground\">{profile?.name}</span>\n                      <span className=\"font-medium text-destructive\" data-testid=\"uplink-balance\">\n                        ₹{amount.toLocaleString(\"en-IN\")}\n                      </span>\n                    </div>\n                  );\n                })}\n              {uplinksTotal === 0 && (\n                <div className=\"text-sm text-muted-foreground text-center\">\n                  No uplink balances\n                </div>\n              )}\n              <div className=\"text-xs text-muted-foreground\">\n                Total owed: ₹{uplinksTotal.toLocaleString(\"en-IN\")}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"downline-balances-card\">\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Downline Balances</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {ledgerEntries\n                .filter(entry => {\n                  const profile = profiles.find(p => p.id === entry.profileId);\n                  return profile?.type === \"downline\";\n                })\n                .map(entry => {\n                  const profile = profiles.find(p => p.id === entry.profileId);\n                  const amount = parseFloat(entry.balance);\n                  return (\n                    <div key={entry.id} className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-muted-foreground\">{profile?.name}</span>\n                      <span className=\"font-medium text-green-600\" data-testid={`downline-balance-${profile?.name?.toLowerCase().replace(\" \", \"-\")}`}>\n                        +₹{amount.toLocaleString(\"en-IN\")}\n                      </span>\n                    </div>\n                  );\n                })}\n              {downlinesTotal === 0 && (\n                <div className=\"text-sm text-muted-foreground text-center\">\n                  No downline balances\n                </div>\n              )}\n              <div className=\"text-xs text-muted-foreground\">\n                Total receivable: ₹{downlinesTotal.toLocaleString(\"en-IN\")}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"net-position-card\">\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Net Position</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-muted-foreground\">Total Profit</span>\n                <span className=\"font-medium text-2xl text-green-600\" data-testid=\"net-profit\">\n                  ₹{netProfit.toLocaleString(\"en-IN\")}\n                </span>\n              </div>\n              <div className=\"text-xs text-muted-foreground\">\n                Week: Jan 8-14, 2024\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Detailed Ledger Table */}\n      <Card data-testid=\"ledger-table-card\">\n        <CardHeader>\n          <CardTitle>Detailed Ledger Report</CardTitle>\n          <p className=\"text-sm text-muted-foreground\">Week ending January 14, 2024</p>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          <DataTable\n            data={ledgerEntries}\n            columns={columns}\n            testId=\"ledger-table\"\n          />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":9892},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { TrendingUp, Eye, EyeOff, ArrowLeft } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const [isLoading, setIsLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [error, setError] = useState(\"\");\n  const { toast } = useToast();\n\n  const form = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const handleLogin = async (data: LoginForm) => {\n    setIsLoading(true);\n    setError(\"\");\n\n    try {\n      // Simulate API call\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n\n      // Demo credentials check\n      if (data.username === \"admin\" && data.password === \"admin123\") {\n        toast({\n          title: \"Login Successful\",\n          description: \"Welcome back to Bookie System!\",\n        });\n        \n        // Store login state (in a real app, you'd handle this properly)\n        localStorage.setItem(\"isLoggedIn\", \"true\");\n        localStorage.setItem(\"userRole\", \"bookie\");\n        localStorage.setItem(\"username\", data.username);\n        \n        setLocation(\"/dashboard\");\n      } else if (data.username === \"assistant\" && data.password === \"assistant123\") {\n        toast({\n          title: \"Login Successful\",\n          description: \"Welcome back to Bookie System!\",\n        });\n        \n        localStorage.setItem(\"isLoggedIn\", \"true\");\n        localStorage.setItem(\"userRole\", \"assistant\");\n        localStorage.setItem(\"username\", data.username);\n        \n        setLocation(\"/dashboard\");\n      } else {\n        setError(\"Invalid username or password\");\n      }\n    } catch (err) {\n      setError(\"Login failed. Please try again.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary/5 via-background to-secondary/5 flex items-center justify-center p-4\" data-testid=\"login-page\">\n      <div className=\"w-full max-w-md\">\n        {/* Back to Landing */}\n        <Button\n          variant=\"ghost\"\n          onClick={() => setLocation(\"/\")}\n          className=\"mb-6 text-muted-foreground hover:text-foreground\"\n          data-testid=\"back-to-landing-button\"\n        >\n          <ArrowLeft className=\"w-4 h-4 mr-2\" />\n          Back to Home\n        </Button>\n\n        <Card className=\"border-border/50 shadow-xl\" data-testid=\"login-card\">\n          <CardHeader className=\"text-center space-y-4\">\n            <div className=\"flex items-center justify-center space-x-2\">\n              <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n                <TrendingUp className=\"w-6 h-6 text-primary-foreground\" />\n              </div>\n              <h1 className=\"text-2xl font-bold text-primary\">Bookie System</h1>\n            </div>\n            <CardTitle className=\"text-2xl\" data-testid=\"login-title\">\n              Welcome Back\n            </CardTitle>\n            <p className=\"text-muted-foreground\" data-testid=\"login-description\">\n              Sign in to access your inventory management system\n            </p>\n          </CardHeader>\n\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(handleLogin)} className=\"space-y-4\">\n                {error && (\n                  <Alert variant=\"destructive\" data-testid=\"login-error\">\n                    <AlertDescription>{error}</AlertDescription>\n                  </Alert>\n                )}\n\n                <FormField\n                  control={form.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Username</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Enter your username\"\n                          {...field}\n                          data-testid=\"username-input\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input\n                            type={showPassword ? \"text\" : \"password\"}\n                            placeholder=\"Enter your password\"\n                            {...field}\n                            data-testid=\"password-input\"\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                            onClick={() => setShowPassword(!showPassword)}\n                            data-testid=\"toggle-password-button\"\n                          >\n                            {showPassword ? (\n                              <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                            ) : (\n                              <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                            )}\n                          </Button>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={isLoading}\n                  data-testid=\"login-submit-button\"\n                >\n                  {isLoading ? \"Signing In...\" : \"Sign In\"}\n                </Button>\n              </form>\n            </Form>\n\n            {/* Demo Credentials */}\n            <div className=\"mt-6 p-4 bg-muted/50 rounded-lg border border-border/50\" data-testid=\"demo-credentials\">\n              <h4 className=\"font-medium text-sm mb-2\">Demo Credentials:</h4>\n              <div className=\"text-xs space-y-1 text-muted-foreground\">\n                <div><strong>Bookie:</strong> admin / admin123</div>\n                <div><strong>Assistant:</strong> assistant / assistant123</div>\n              </div>\n            </div>\n\n            <div className=\"mt-6 text-center\">\n              <p className=\"text-sm text-muted-foreground\">\n                Need help? Contact your system administrator\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":7570},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/profiles.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Plus, Search, Edit, Trash2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport DataTable from \"@/components/tables/data-table\";\nimport ProfileModal from \"@/components/modals/profile-modal\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { type Profile, type InsertProfile } from \"@shared/schema\";\n\nexport default function Profiles() {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedProfile, setSelectedProfile] = useState<Profile | null>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [typeFilter, setTypeFilter] = useState(\"all\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const { toast } = useToast();\n\n  // Fetch profiles from API\n  const { data: profiles = [], isLoading } = useQuery<Profile[]>({\n    queryKey: [\"/api/profiles\"],\n  });\n\n  // Create profile mutation\n  const createProfileMutation = useMutation({\n    mutationFn: async (data: InsertProfile) => {\n      const response = await apiRequest(\"POST\", \"/api/profiles\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/profiles\"] });\n      toast({\n        title: \"Success\",\n        description: \"Profile created successfully\",\n      });\n      setIsModalOpen(false);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create profile\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update profile mutation\n  const updateProfileMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertProfile> }) => {\n      const response = await apiRequest(\"PUT\", `/api/profiles/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/profiles\"] });\n      toast({\n        title: \"Success\",\n        description: \"Profile updated successfully\",\n      });\n      setIsModalOpen(false);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update profile\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete profile mutation\n  const deleteProfileMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/profiles/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/profiles\"] });\n      toast({\n        title: \"Success\",\n        description: \"Profile deleted successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete profile\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredProfiles = profiles.filter(profile => {\n    const matchesSearch = profile.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         profile.phone.includes(searchTerm);\n    const matchesType = typeFilter === \"all\" || profile.type === typeFilter;\n    const matchesStatus = statusFilter === \"all\" || \n                         (statusFilter === \"active\" && profile.isActive) ||\n                         (statusFilter === \"inactive\" && !profile.isActive);\n    \n    return matchesSearch && matchesType && matchesStatus;\n  });\n\n  const handleAddProfile = () => {\n    setSelectedProfile(null);\n    setIsModalOpen(true);\n  };\n\n  const handleEditProfile = (profile: Profile) => {\n    setSelectedProfile(profile);\n    setIsModalOpen(true);\n  };\n\n  const handleSubmitProfile = (data: InsertProfile) => {\n    if (selectedProfile) {\n      updateProfileMutation.mutate({ id: selectedProfile.id, data });\n    } else {\n      createProfileMutation.mutate(data);\n    }\n  };\n\n  const handleDeleteProfile = (profileId: string) => {\n    if (confirm(\"Are you sure you want to delete this profile?\")) {\n      deleteProfileMutation.mutate(profileId);\n    }\n  };\n\n  const columns = [\n    {\n      key: \"name\",\n      title: \"Name\",\n      render: (value: string, row: Profile) => (\n        <div>\n          <div className=\"font-medium\" data-testid={`profile-name-${row.id}`}>\n            {value}\n          </div>\n          <div className=\"text-sm text-muted-foreground\">\n            {row.notes || `${row.type} profile`}\n          </div>\n        </div>\n      ),\n    },\n    {\n      key: \"type\",\n      title: \"Type\",\n      render: (value: string) => (\n        <Badge \n          variant={value === \"uplink\" ? \"default\" : \"secondary\"}\n          className={\n            value === \"uplink\" \n              ? \"bg-primary/10 text-primary\" \n              : \"bg-green-100 text-green-600\"\n          }\n          data-testid={`profile-type-${value}`}\n        >\n          {value.charAt(0).toUpperCase() + value.slice(1)}\n        </Badge>\n      ),\n    },\n    {\n      key: \"phone\",\n      title: \"Contact\",\n      render: (value: string, row: Profile) => (\n        <div>\n          <div data-testid={`profile-phone-${row.id}`}>{value}</div>\n          {row.email && (\n            <div className=\"text-sm text-muted-foreground\" data-testid={`profile-email-${row.id}`}>\n              {row.email}\n            </div>\n          )}\n        </div>\n      ),\n    },\n    {\n      key: \"ratePerPoint\",\n      title: \"Rate/Point\",\n      align: \"right\" as const,\n      render: (value: string) => `₹${parseFloat(value).toFixed(2)}`,\n    },\n    {\n      key: \"commissionPercentage\",\n      title: \"Commission\",\n      align: \"right\" as const,\n      render: (value: string | null) => value ? `${parseFloat(value)}%` : \"-\",\n    },\n    {\n      key: \"actions\",\n      title: \"Actions\",\n      align: \"center\" as const,\n      render: (_: any, row: Profile) => (\n        <div className=\"flex justify-center space-x-2\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => handleEditProfile(row)}\n            data-testid={`edit-profile-${row.id}`}\n          >\n            <Edit className=\"w-4 h-4 text-primary\" />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => handleDeleteProfile(row.id)}\n            data-testid={`delete-profile-${row.id}`}\n          >\n            <Trash2 className=\"w-4 h-4 text-destructive\" />\n          </Button>\n        </div>\n      ),\n    },\n  ];\n\n  return (\n    <div className=\"p-4 md:p-6\" data-testid=\"profiles-page\">\n      <div className=\"flex flex-col md:flex-row md:items-center justify-between mb-6\">\n        <div>\n          <h2 className=\"text-2xl font-bold mb-2\" data-testid=\"profiles-title\">\n            Uplinks & Downlines\n          </h2>\n          <p className=\"text-muted-foreground\" data-testid=\"profiles-description\">\n            Manage your inventory partners\n          </p>\n        </div>\n        <Button\n          onClick={handleAddProfile}\n          className=\"mt-4 md:mt-0\"\n          data-testid=\"add-profile-button\"\n        >\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Add Profile\n        </Button>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"mb-6\">\n        <CardContent className=\"p-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div>\n              <Label htmlFor=\"search\">Search</Label>\n              <div className=\"relative mt-2\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                <Input\n                  id=\"search\"\n                  placeholder=\"Search profiles...\"\n                  className=\"pl-9\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  data-testid=\"profiles-search-input\"\n                />\n              </div>\n            </div>\n            <div>\n              <Label htmlFor=\"type-filter\">Type</Label>\n              <Select value={typeFilter} onValueChange={setTypeFilter}>\n                <SelectTrigger className=\"mt-2\" data-testid=\"profiles-type-filter\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Types</SelectItem>\n                  <SelectItem value=\"uplink\">Uplink</SelectItem>\n                  <SelectItem value=\"downline\">Downline</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"status-filter\">Status</Label>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"mt-2\" data-testid=\"profiles-status-filter\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"active\">Active</SelectItem>\n                  <SelectItem value=\"inactive\">Inactive</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"flex items-end\">\n              <Button\n                variant=\"secondary\"\n                className=\"w-full mt-2\"\n                onClick={() => {\n                  setSearchTerm(\"\");\n                  setTypeFilter(\"all\");\n                  setStatusFilter(\"all\");\n                }}\n                data-testid=\"profiles-clear-filters-button\"\n              >\n                <Search className=\"w-4 h-4 mr-2\" />\n                Clear Filters\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Profiles Table */}\n      <DataTable\n        data={filteredProfiles}\n        columns={columns}\n        testId=\"profiles-table\"\n        loading={isLoading}\n      />\n\n      {/* Profile Modal */}\n      <ProfileModal\n        isOpen={isModalOpen}\n        onClose={() => setIsModalOpen(false)}\n        onSubmit={handleSubmitProfile}\n        profile={selectedProfile}\n      />\n    </div>\n  );\n}\n","size_bytes":10433},"client/src/pages/reports.tsx":{"content":"import { useState } from \"react\";\nimport { BarChart3, Download, FileText } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport DataTable from \"@/components/tables/data-table\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Reports() {\n  const [reportType, setReportType] = useState(\"profit-loss\");\n  const [startDate, setStartDate] = useState(() => {\n    const date = new Date();\n    return new Date(date.getFullYear(), date.getMonth(), 1).toISOString().split('T')[0];\n  });\n  const [endDate, setEndDate] = useState(() => new Date().toISOString().split('T')[0]);\n  const [shouldGenerate, setShouldGenerate] = useState(true);\n  const { toast } = useToast();\n\n  // Fetch report data\n  const { data: reportResult, isLoading, refetch } = useQuery({\n    queryKey: [\"/api/reports\", { startDate, endDate, reportType }],\n    queryFn: () => {\n      const params = new URLSearchParams({ \n        startDate, \n        endDate, \n        reportType \n      });\n      return fetch(`/api/reports?${params}`).then(res => res.json());\n    },\n    enabled: shouldGenerate,\n  });\n\n  const handleGenerateReport = () => {\n    setShouldGenerate(true);\n    refetch();\n    toast({\n      title: \"Generating Report\",\n      description: \"Report is being generated with current filters\",\n    });\n  };\n\n  const handleExportPDF = () => {\n    toast({\n      title: \"Feature Coming Soon\",\n      description: \"PDF export functionality will be implemented\",\n    });\n  };\n\n  const handleExportCSV = () => {\n    if (!reportResult?.data) {\n      toast({\n        title: \"No Data\",\n        description: \"Please generate a report first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Simple CSV export\n    const headers = [\"Profile\", \"Type\", \"Volume\", \"Revenue\", \"Commission\", \"Net P&L\"];\n    const csvContent = [\n      headers.join(\",\"),\n      ...reportResult.data.map((row: any) => [\n        row.profileName,\n        row.type,\n        row.volume,\n        row.revenue,\n        row.commission,\n        row.netPL\n      ].join(\",\"))\n    ].join(\"\\n\");\n\n    const blob = new Blob([csvContent], { type: \"text/csv\" });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = `report-${reportType}-${startDate}-${endDate}.csv`;\n    a.click();\n    window.URL.revokeObjectURL(url);\n\n    toast({\n      title: \"CSV Downloaded\",\n      description: \"Report has been exported to CSV\",\n    });\n  };\n\n  const reportData = reportResult?.data || [];\n  const summary = reportResult?.summary || {\n    totalRevenue: 0,\n    totalCosts: 0,\n    grossProfit: 0,\n    profitMargin: 0\n  };\n\n  const columns = [\n    {\n      key: \"profileName\",\n      title: \"Profile\",\n      render: (value: string) => (\n        <div className=\"font-medium\" data-testid={`report-profile-${value}`}>\n          {value}\n        </div>\n      ),\n    },\n    {\n      key: \"type\",\n      title: \"Type\",\n    },\n    {\n      key: \"volume\",\n      title: \"Volume\",\n      align: \"right\" as const,\n    },\n    {\n      key: \"revenue\",\n      title: \"Revenue\",\n      align: \"right\" as const,\n    },\n    {\n      key: \"commission\",\n      title: \"Commission\",\n      align: \"right\" as const,\n    },\n    {\n      key: \"netPL\",\n      title: \"Net P&L\",\n      align: \"right\" as const,\n      render: (value: string, row: any) => (\n        <span \n          className={`font-medium ${row.isProfit ? \"text-green-600\" : \"text-destructive\"}`}\n          data-testid={`report-pnl-${row.id}`}\n        >\n          {value}\n        </span>\n      ),\n    },\n  ];\n\n  return (\n    <div className=\"p-4 md:p-6\" data-testid=\"reports-page\">\n      <div className=\"mb-6\">\n        <h2 className=\"text-2xl font-bold mb-2\" data-testid=\"reports-title\">\n          Custom Reports\n        </h2>\n        <p className=\"text-muted-foreground\" data-testid=\"reports-description\">\n          Generate detailed reports for any date range\n        </p>\n      </div>\n\n      {/* Report Filters */}\n      <Card className=\"mb-6\">\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Generate Report</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div>\n              <Label htmlFor=\"report-type\">Report Type</Label>\n              <Select value={reportType} onValueChange={setReportType}>\n                <SelectTrigger className=\"mt-2\" data-testid=\"report-type-select\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"profit-loss\">Profit/Loss Report</SelectItem>\n                  <SelectItem value=\"balance-summary\">Balance Summary</SelectItem>\n                  <SelectItem value=\"transaction-report\">Transaction Report</SelectItem>\n                  <SelectItem value=\"commission-analysis\">Commission Analysis</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"start-date\">Start Date</Label>\n              <Input\n                id=\"start-date\"\n                type=\"date\"\n                className=\"mt-2\"\n                value={startDate}\n                onChange={(e) => setStartDate(e.target.value)}\n                data-testid=\"report-start-date-input\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"end-date\">End Date</Label>\n              <Input\n                id=\"end-date\"\n                type=\"date\"\n                className=\"mt-2\"\n                value={endDate}\n                onChange={(e) => setEndDate(e.target.value)}\n                data-testid=\"report-end-date-input\"\n              />\n            </div>\n            <div className=\"flex items-end\">\n              <Button\n                onClick={handleGenerateReport}\n                className=\"w-full mt-2\"\n                data-testid=\"generate-report-button\"\n              >\n                <BarChart3 className=\"w-4 h-4 mr-2\" />\n                Generate\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Sample Report */}\n      <Card data-testid=\"report-results-card\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle>Profit/Loss Report</CardTitle>\n              <p className=\"text-sm text-muted-foreground\" data-testid=\"report-period\">\n                {reportResult?.period ? \n                  `${new Date(reportResult.period.start).toLocaleDateString(\"en-IN\")} - ${new Date(reportResult.period.end).toLocaleDateString(\"en-IN\")}` :\n                  \"Select date range and generate report\"\n                }\n              </p>\n            </div>\n            <div className=\"space-x-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleExportPDF}\n                data-testid=\"export-pdf-button\"\n              >\n                <Download className=\"w-4 h-4 mr-1\" />\n                PDF\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleExportCSV}\n                data-testid=\"export-csv-button\"\n              >\n                <FileText className=\"w-4 h-4 mr-1\" />\n                CSV\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {/* Report Summary */}\n          <div className=\"p-6 border-b border-border\">\n            {isLoading ? (\n              <div className=\"text-center text-muted-foreground\">Loading report data...</div>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-primary\" data-testid=\"total-revenue\">\n                    ₹{summary.totalRevenue.toLocaleString(\"en-IN\")}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Total Revenue</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-destructive\" data-testid=\"total-costs\">\n                    ₹{summary.totalCosts.toLocaleString(\"en-IN\")}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Total Costs</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-green-600\" data-testid=\"gross-profit\">\n                    ₹{summary.grossProfit.toLocaleString(\"en-IN\")}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Gross Profit</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-green-600\" data-testid=\"profit-margin\">\n                    {summary.profitMargin.toFixed(1)}%\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Profit Margin</div>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Detailed Breakdown */}\n          <div className=\"p-0\">\n            {isLoading ? (\n              <div className=\"p-4 text-center text-muted-foreground\">Loading report breakdown...</div>\n            ) : reportData.length === 0 ? (\n              <div className=\"p-4 text-center text-muted-foreground\">\n                No transactions found for the selected period\n              </div>\n            ) : (\n              <DataTable\n                data={reportData}\n                columns={columns}\n                testId=\"report-breakdown-table\"\n              />\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":10153},"client/src/pages/settlement.tsx":{"content":"import { useState } from \"react\";\nimport { Send, Eye, RotateCcw, CheckCircle, Clock } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport DataTable from \"@/components/tables/data-table\";\nimport SettlementModal from \"@/components/modals/settlement-modal\";\nimport MessagePreviewModal from \"@/components/modals/message-preview-modal\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { type Settlement, type Profile } from \"@shared/schema\";\n\nexport default function Settlement() {\n  const [isSettlementModalOpen, setIsSettlementModalOpen] = useState(false);\n  const [isPreviewModalOpen, setIsPreviewModalOpen] = useState(false);\n  const [selectedSettlement, setSelectedSettlement] = useState<Settlement | null>(null);\n  const { toast } = useToast();\n\n  // Fetch settlements and profiles\n  const { data: settlements = [], isLoading: isLoadingSettlements } = useQuery<Settlement[]>({\n    queryKey: [\"/api/settlements\"],\n  });\n\n  const { data: profiles = [] } = useQuery<Profile[]>({\n    queryKey: [\"/api/profiles\"],\n  });\n\n  // Create settlement mutation\n  const createSettlementMutation = useMutation({\n    mutationFn: (data: any) => apiRequest(\"POST\", \"/api/settlements\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/settlements\"] });\n      setIsSettlementModalOpen(false);\n      toast({\n        title: \"Success\",\n        description: \"Settlement sent successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send settlement\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSendSettlement = (data: any) => {\n    createSettlementMutation.mutate(data);\n  };\n\n  const handlePreviewMessage = (settlement: Settlement) => {\n    setSelectedSettlement(settlement);\n    setIsPreviewModalOpen(true);\n  };\n\n  const handleResendMessage = (settlementId: string) => {\n    toast({\n      title: \"Info\",\n      description: \"Resend functionality will be implemented with WhatsApp integration\",\n    });\n  };\n\n  const selectedProfile = selectedSettlement \n    ? profiles.find(p => p.id === selectedSettlement.profileId) || null\n    : null;\n\n  const columns = [\n    {\n      key: \"createdAt\",\n      title: \"Date\",\n      render: (value: string | Date) => {\n        const date = typeof value === \"string\" ? new Date(value) : value;\n        return date.toLocaleDateString(\"en-IN\");\n      },\n    },\n    {\n      key: \"period\",\n      title: \"Period\",\n      render: (value: string) => {\n        // Handle YYYY-MM format\n        if (value.match(/^\\d{4}-\\d{2}$/)) {\n          const [year, month] = value.split('-');\n          const date = new Date(parseInt(year), parseInt(month) - 1);\n          return date.toLocaleDateString(\"en-IN\", { year: 'numeric', month: 'long' });\n        }\n        // Fallback for other formats\n        return value;\n      },\n    },\n    {\n      key: \"profileId\",\n      title: \"Profile\",\n      render: (value: string) => {\n        const profile = profiles.find(p => p.id === value);\n        return profile?.name || \"Unknown\";\n      },\n    },\n    {\n      key: \"amount\",\n      title: \"Amount\",\n      align: \"right\" as const,\n      render: (value: string) => `₹${parseFloat(value).toLocaleString(\"en-IN\")}`,\n    },\n    {\n      key: \"status\",\n      title: \"Status\",\n      align: \"center\" as const,\n      render: (value: string) => {\n        const statusConfig = {\n          sent: { icon: CheckCircle, color: \"text-green-600\", bg: \"bg-green-100\", label: \"Sent\" },\n          pending: { icon: Clock, color: \"text-yellow-600\", bg: \"bg-yellow-100\", label: \"Pending\" },\n          failed: { icon: RotateCcw, color: \"text-red-600\", bg: \"bg-red-100\", label: \"Failed\" },\n        };\n        \n        const config = statusConfig[value as keyof typeof statusConfig];\n        const Icon = config.icon;\n        \n        return (\n          <Badge \n            variant=\"outline\"\n            className={`${config.bg} ${config.color}`}\n            data-testid={`settlement-status-${value}`}\n          >\n            <Icon className=\"w-3 h-3 mr-1\" />\n            {config.label}\n          </Badge>\n        );\n      },\n    },\n    {\n      key: \"actions\",\n      title: \"Actions\",\n      align: \"center\" as const,\n      render: (_: any, row: Settlement) => (\n        <div className=\"flex justify-center space-x-2\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => handlePreviewMessage(row)}\n            data-testid={`preview-settlement-${row.id}`}\n          >\n            <Eye className=\"w-4 h-4 text-primary\" />\n          </Button>\n          {row.status !== \"sent\" && (\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => handleResendMessage(row.id)}\n              data-testid={`resend-settlement-${row.id}`}\n            >\n              <RotateCcw className=\"w-4 h-4 text-primary\" />\n            </Button>\n          )}\n        </div>\n      ),\n    },\n  ];\n\n  return (\n    <div className=\"p-4 md:p-6\" data-testid=\"settlement-page\">\n      <div className=\"flex flex-col md:flex-row md:items-center justify-between mb-6\">\n        <div>\n          <h2 className=\"text-2xl font-bold mb-2\" data-testid=\"settlement-title\">\n            Settlement & WhatsApp\n          </h2>\n          <p className=\"text-muted-foreground\" data-testid=\"settlement-description\">\n            Automated settlement reports via WhatsApp\n          </p>\n        </div>\n        <Button\n          onClick={() => setIsSettlementModalOpen(true)}\n          className=\"mt-4 md:mt-0\"\n          data-testid=\"send-settlement-button\"\n        >\n          <Send className=\"w-4 h-4 mr-2\" />\n          Send Settlement\n        </Button>\n      </div>\n\n      {/* Settlement Status */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n        <Card data-testid=\"next-settlement-card\">\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Next Settlement</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-muted-foreground\">Scheduled Date:</span>\n                <span className=\"font-medium\" data-testid=\"next-settlement-date\">\n                  {(() => {\n                    const nextMonday = new Date();\n                    nextMonday.setDate(nextMonday.getDate() + (1 + 7 - nextMonday.getDay()) % 7);\n                    return nextMonday.toLocaleDateString(\"en-IN\", { \n                      weekday: 'long', \n                      year: 'numeric', \n                      month: 'short', \n                      day: 'numeric' \n                    });\n                  })()}\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-muted-foreground\">Profiles to Settle:</span>\n                <span className=\"font-medium\" data-testid=\"next-settlement-profiles\">\n                  {profiles.filter(p => p.isActive).length} profiles\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-muted-foreground\">Auto Send:</span>\n                <Badge className=\"bg-green-100 text-green-600\" data-testid=\"auto-send-status\">\n                  Enabled\n                </Badge>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"whatsapp-status-card\">\n          <CardHeader>\n            <CardTitle className=\"text-lg\">WhatsApp Status</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-muted-foreground\">API Status:</span>\n                <Badge className=\"bg-green-100 text-green-600\" data-testid=\"whatsapp-api-status\">\n                  <CheckCircle className=\"w-3 h-3 mr-1\" />\n                  Connected\n                </Badge>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-muted-foreground\">Messages Sent Today:</span>\n                <span className=\"font-medium\" data-testid=\"messages-sent-today\">\n                  {settlements.filter(s => {\n                    const today = new Date().toDateString();\n                    return s.createdAt && new Date(s.createdAt).toDateString() === today;\n                  }).length}\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-muted-foreground\">Failed Deliveries:</span>\n                <span className=\"font-medium text-destructive\" data-testid=\"failed-deliveries\">\n                  {settlements.filter(s => s.status === \"failed\").length}\n                </span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Settlement History */}\n      <Card data-testid=\"settlement-history-card\">\n        <CardHeader>\n          <CardTitle>Settlement History</CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          {isLoadingSettlements ? (\n            <div className=\"p-4 text-center text-muted-foreground\">Loading settlements...</div>\n          ) : (\n            <DataTable\n              data={settlements}\n              columns={columns}\n              testId=\"settlement-history-table\"\n            />\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Settlement Modal */}\n      <SettlementModal\n        isOpen={isSettlementModalOpen}\n        onClose={() => setIsSettlementModalOpen(false)}\n        onSubmit={handleSendSettlement}\n      />\n\n      {/* Message Preview Modal */}\n      <MessagePreviewModal\n        isOpen={isPreviewModalOpen}\n        onClose={() => setIsPreviewModalOpen(false)}\n        settlement={selectedSettlement}\n        profile={selectedProfile}\n      />\n    </div>\n  );\n}\n","size_bytes":10353},"client/src/pages/transactions.tsx":{"content":"import { useState } from \"react\";\nimport { Plus, Filter, Edit, Trash2, TrendingDown, TrendingUp } from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport DataTable from \"@/components/tables/data-table\";\nimport TransactionModal from \"@/components/modals/transaction-modal\";\nimport { type Transaction, type InsertTransaction, type Profile } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Transactions() {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedTransaction, setSelectedTransaction] = useState<Transaction | null>(null);\n  const [dateFrom, setDateFrom] = useState(\"\");\n  const [dateTo, setDateTo] = useState(\"\");\n  const [typeFilter, setTypeFilter] = useState(\"all\");\n  const [profileFilter, setProfileFilter] = useState(\"all\");\n  const { toast } = useToast();\n\n  // Fetch transactions from API\n  const { data: transactions = [], isLoading: transactionsLoading } = useQuery<Transaction[]>({\n    queryKey: [\"/api/transactions\"],\n  });\n\n  // Fetch profiles from API\n  const { data: profiles = [], isLoading: profilesLoading } = useQuery<Profile[]>({\n    queryKey: [\"/api/profiles\"],\n  });\n\n  const filteredTransactions = transactions.filter(transaction => {\n    const transactionDate = new Date(transaction.date).toISOString().split('T')[0];\n    const matchesDateFrom = !dateFrom || transactionDate >= dateFrom;\n    const matchesDateTo = !dateTo || transactionDate <= dateTo;\n    const matchesType = typeFilter === \"all\" || transaction.type === typeFilter;\n    const matchesProfile = profileFilter === \"all\" || transaction.profileId === profileFilter;\n    \n    return matchesDateFrom && matchesDateTo && matchesType && matchesProfile;\n  });\n\n  const handleAddTransaction = () => {\n    setSelectedTransaction(null);\n    setIsModalOpen(true);\n  };\n\n  const handleEditTransaction = (transaction: Transaction) => {\n    setSelectedTransaction(transaction);\n    setIsModalOpen(true);\n  };\n\n  // Create transaction mutation\n  const createTransactionMutation = useMutation({\n    mutationFn: (data: InsertTransaction) => apiRequest(\"POST\", \"/api/transactions\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/transactions\"] });\n      toast({\n        title: \"Success\",\n        description: \"Transaction created successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create transaction\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update transaction mutation\n  const updateTransactionMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<InsertTransaction> }) => \n      apiRequest(\"PUT\", `/api/transactions/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/transactions\"] });\n      toast({\n        title: \"Success\",\n        description: \"Transaction updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update transaction\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete transaction mutation\n  const deleteTransactionMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/transactions/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/transactions\"] });\n      toast({\n        title: \"Success\",\n        description: \"Transaction deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete transaction\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmitTransaction = (data: InsertTransaction) => {\n    if (selectedTransaction) {\n      updateTransactionMutation.mutate({ id: selectedTransaction.id, data });\n    } else {\n      createTransactionMutation.mutate(data);\n    }\n  };\n\n  const handleDeleteTransaction = (transactionId: string) => {\n    if (confirm(\"Are you sure you want to delete this transaction?\")) {\n      deleteTransactionMutation.mutate(transactionId);\n    }\n  };\n\n  const columns = [\n    {\n      key: \"date\",\n      title: \"Date\",\n      render: (value: Date | string) => {\n        const date = value instanceof Date ? value : new Date(value);\n        return date.toLocaleDateString(\"en-IN\");\n      },\n    },\n    {\n      key: \"type\",\n      title: \"Type\",\n      render: (value: string) => (\n        <Badge \n          variant={value === \"taken\" ? \"default\" : \"secondary\"}\n          className={\n            value === \"taken\" \n              ? \"bg-primary/10 text-primary\" \n              : \"bg-green-100 text-green-600\"\n          }\n          data-testid={`transaction-type-${value}`}\n        >\n          {value === \"taken\" ? (\n            <>\n              <TrendingDown className=\"w-3 h-3 mr-1\" />\n              Taken\n            </>\n          ) : (\n            <>\n              <TrendingUp className=\"w-3 h-3 mr-1\" />\n              Given\n            </>\n          )}\n        </Badge>\n      ),\n    },\n    {\n      key: \"profileId\",\n      title: \"Profile\",\n      render: (value: string) => {\n        const profile = profiles.find(p => p.id === value);\n        return profile?.name || \"Unknown\";\n      },\n    },\n    {\n      key: \"points\",\n      title: \"Points\",\n      align: \"right\" as const,\n      render: (value: number) => value.toLocaleString(\"en-IN\"),\n    },\n    {\n      key: \"ratePerPoint\",\n      title: \"Rate\",\n      align: \"right\" as const,\n      render: (value: string) => `₹${parseFloat(value).toFixed(2)}`,\n    },\n    {\n      key: \"commissionPercentage\",\n      title: \"Commission\",\n      align: \"right\" as const,\n      render: (value: string | null) => value ? `${parseFloat(value)}%` : \"-\",\n    },\n    {\n      key: \"totalAmount\",\n      title: \"Total Amount\",\n      align: \"right\" as const,\n      render: (value: string) => `₹${parseFloat(value).toLocaleString(\"en-IN\")}`,\n    },\n    {\n      key: \"actions\",\n      title: \"Actions\",\n      align: \"center\" as const,\n      render: (_: any, row: Transaction) => (\n        <div className=\"flex justify-center space-x-2\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => handleEditTransaction(row)}\n            data-testid={`edit-transaction-${row.id}`}\n          >\n            <Edit className=\"w-4 h-4 text-primary\" />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => handleDeleteTransaction(row.id)}\n            data-testid={`delete-transaction-${row.id}`}\n          >\n            <Trash2 className=\"w-4 h-4 text-destructive\" />\n          </Button>\n        </div>\n      ),\n    },\n  ];\n\n  return (\n    <div className=\"p-4 md:p-6\" data-testid=\"transactions-page\">\n      <div className=\"flex flex-col md:flex-row md:items-center justify-between mb-6\">\n        <div>\n          <h2 className=\"text-2xl font-bold mb-2\" data-testid=\"transactions-title\">\n            Inventory Transactions\n          </h2>\n          <p className=\"text-muted-foreground\" data-testid=\"transactions-description\">\n            Track all inventory movements\n          </p>\n        </div>\n        <Button\n          onClick={handleAddTransaction}\n          className=\"mt-4 md:mt-0\"\n          data-testid=\"add-transaction-button\"\n        >\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Add Transaction\n        </Button>\n      </div>\n\n      {/* Transaction Filters */}\n      <Card className=\"mb-6\">\n        <CardContent className=\"p-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n            <div>\n              <Label htmlFor=\"date-from\">Date From</Label>\n              <Input\n                id=\"date-from\"\n                type=\"date\"\n                className=\"mt-2\"\n                value={dateFrom}\n                onChange={(e) => setDateFrom(e.target.value)}\n                data-testid=\"transactions-date-from-input\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"date-to\">Date To</Label>\n              <Input\n                id=\"date-to\"\n                type=\"date\"\n                className=\"mt-2\"\n                value={dateTo}\n                onChange={(e) => setDateTo(e.target.value)}\n                data-testid=\"transactions-date-to-input\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"type-filter\">Type</Label>\n              <Select value={typeFilter} onValueChange={setTypeFilter}>\n                <SelectTrigger className=\"mt-2\" data-testid=\"transactions-type-filter\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Types</SelectItem>\n                  <SelectItem value=\"taken\">Inventory Taken</SelectItem>\n                  <SelectItem value=\"given\">Inventory Given</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"profile-filter\">Profile</Label>\n              <Select value={profileFilter} onValueChange={setProfileFilter}>\n                <SelectTrigger className=\"mt-2\" data-testid=\"transactions-profile-filter\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Profiles</SelectItem>\n                  {profiles.map((profile) => (\n                    <SelectItem key={profile.id} value={profile.id}>\n                      {profile.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"flex items-end\">\n              <Button\n                variant=\"secondary\"\n                className=\"w-full mt-2\"\n                onClick={() => {\n                  setDateFrom(\"\");\n                  setDateTo(\"\");\n                  setTypeFilter(\"all\");\n                  setProfileFilter(\"all\");\n                }}\n                data-testid=\"transactions-apply-filters-button\"\n              >\n                <Filter className=\"w-4 h-4 mr-2\" />\n                Clear Filters\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Transactions Table */}\n      <DataTable\n        data={filteredTransactions}\n        columns={columns}\n        loading={transactionsLoading}\n        testId=\"transactions-table\"\n      />\n\n      {/* Transaction Modal */}\n      <TransactionModal\n        isOpen={isModalOpen}\n        onClose={() => setIsModalOpen(false)}\n        onSubmit={handleSubmitTransaction}\n        transaction={selectedTransaction}\n      />\n    </div>\n  );\n}\n","size_bytes":11242},"client/src/pages/users.tsx":{"content":"import { useState } from \"react\";\nimport { UserPlus, Edit, Ban } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport DataTable from \"@/components/tables/data-table\";\nimport UserModal from \"@/components/modals/user-modal\";\nimport { type UserPublic, type InsertUser } from \"@shared/schema\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Users() {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<UserPublic | null>(null);\n  const { toast } = useToast();\n\n  // Fetch users from API\n  const { data: users = [], isLoading } = useQuery<UserPublic[]>({\n    queryKey: [\"/api/users\"],\n  });\n\n  // Create user mutation\n  const createUserMutation = useMutation({\n    mutationFn: (data: InsertUser) => apiRequest(\"POST\", \"/api/users\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Success\",\n        description: \"User created successfully\",\n      });\n      setIsModalOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update user mutation\n  const updateUserMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<InsertUser> }) => \n      apiRequest(\"PUT\", `/api/users/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Success\",\n        description: \"User updated successfully\",\n      });\n      setIsModalOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete user mutation\n  const deleteUserMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/users/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Success\",\n        description: \"User deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddUser = () => {\n    setSelectedUser(null);\n    setIsModalOpen(true);\n  };\n\n  const handleEditUser = (user: UserPublic) => {\n    setSelectedUser(user);\n    setIsModalOpen(true);\n  };\n\n  const handleSubmitUser = (data: InsertUser) => {\n    if (selectedUser) {\n      updateUserMutation.mutate({ id: selectedUser.id, data });\n    } else {\n      createUserMutation.mutate(data);\n    }\n  };\n\n  const handleToggleUserStatus = (userId: string) => {\n    const user = users.find(u => u.id === userId);\n    if (user) {\n      updateUserMutation.mutate({\n        id: userId,\n        data: { isActive: !user.isActive }\n      });\n    }\n  };\n\n  const formatLastLogin = (date: Date | null) => {\n    if (!date) return \"Never\";\n    return date.toLocaleDateString(\"en-IN\") + \" \" + date.toLocaleTimeString(\"en-IN\", {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n  };\n\n  const columns = [\n    {\n      key: \"username\",\n      title: \"Username\",\n      render: (value: string) => (\n        <div className=\"font-medium\" data-testid={`user-username-${value}`}>\n          {value}\n        </div>\n      ),\n    },\n    {\n      key: \"role\",\n      title: \"Role\",\n      render: (value: string) => (\n        <Badge \n          variant={value === \"bookie\" ? \"default\" : \"secondary\"}\n          className={\n            value === \"bookie\" \n              ? \"bg-primary/10 text-primary\" \n              : \"bg-secondary/50 text-secondary-foreground\"\n          }\n          data-testid={`user-role-${value}`}\n        >\n          {value === \"bookie\" ? \"Bookie\" : \"Assistant\"}\n        </Badge>\n      ),\n    },\n    {\n      key: \"email\",\n      title: \"Email\",\n      render: (value: string) => (\n        <div className=\"text-sm\" data-testid=\"user-email\">\n          {value}\n        </div>\n      ),\n    },\n    {\n      key: \"lastLogin\",\n      title: \"Last Login\",\n      render: (value: Date | null) => (\n        <div className=\"text-sm\" data-testid=\"user-last-login\">\n          {formatLastLogin(value)}\n        </div>\n      ),\n    },\n    {\n      key: \"isActive\",\n      title: \"Status\",\n      align: \"center\" as const,\n      render: (value: boolean) => (\n        <Badge \n          variant=\"outline\"\n          className={value ? \"bg-green-100 text-green-600\" : \"bg-red-100 text-red-600\"}\n          data-testid={`user-status-${value ? \"active\" : \"inactive\"}`}\n        >\n          {value ? \"Active\" : \"Inactive\"}\n        </Badge>\n      ),\n    },\n    {\n      key: \"actions\",\n      title: \"Actions\",\n      align: \"center\" as const,\n      render: (_: any, row: UserPublic) => (\n        <div className=\"flex justify-center space-x-2\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => handleEditUser(row)}\n            data-testid={`edit-user-${row.id}`}\n          >\n            <Edit className=\"w-4 h-4 text-primary\" />\n          </Button>\n          {row.username !== \"admin\" && (\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => handleToggleUserStatus(row.id)}\n              data-testid={`toggle-user-${row.id}`}\n            >\n              <Ban className=\"w-4 h-4 text-destructive\" />\n            </Button>\n          )}\n        </div>\n      ),\n    },\n  ];\n\n  return (\n    <div className=\"p-4 md:p-6\" data-testid=\"users-page\">\n      <div className=\"flex flex-col md:flex-row md:items-center justify-between mb-6\">\n        <div>\n          <h2 className=\"text-2xl font-bold mb-2\" data-testid=\"users-title\">\n            User Management\n          </h2>\n          <p className=\"text-muted-foreground\" data-testid=\"users-description\">\n            Manage system users and permissions\n          </p>\n        </div>\n        <Button\n          onClick={handleAddUser}\n          className=\"mt-4 md:mt-0\"\n          data-testid=\"add-user-button\"\n        >\n          <UserPlus className=\"w-4 h-4 mr-2\" />\n          Add User\n        </Button>\n      </div>\n\n      {/* Users Table */}\n      <DataTable\n        data={users}\n        columns={columns}\n        testId=\"users-table\"\n      />\n\n      {/* User Modal */}\n      <UserModal\n        isOpen={isModalOpen}\n        onClose={() => setIsModalOpen(false)}\n        onSubmit={handleSubmitUser}\n        user={selectedUser}\n      />\n    </div>\n  );\n}\n","size_bytes":6809},"mobile/src/screens/AddTransactionScreen.tsx":{"content":"import React, { useState } from 'react';\nimport {\n  View,\n  Text,\n  TextInput,\n  StyleSheet,\n  ScrollView,\n  TouchableOpacity,\n  SafeAreaView,\n  Alert,\n} from 'react-native';\nimport type { AddTransactionScreenProps } from '../types/navigation';\n\nexport default function AddTransactionScreen({ navigation }: AddTransactionScreenProps) {\n  const [selectedProfile, setSelectedProfile] = useState('');\n  const [transactionType, setTransactionType] = useState<'credit' | 'debit'>('credit');\n  const [points, setPoints] = useState('');\n  const [rate, setRate] = useState('');\n  const [commission, setCommission] = useState('');\n\n  const profiles = [\n    'Mumbai Kings',\n    'Chennai Express', \n    'Delhi Daredevils',\n    'Kolkata Knights',\n    'Rajasthan Royals'\n  ];\n\n  const calculateAmount = () => {\n    const pointsNum = parseInt(points) || 0;\n    const rateNum = parseInt(rate) || 0;\n    return pointsNum * rateNum;\n  };\n\n  const calculateCommissionAmount = () => {\n    const commissionNum = parseFloat(commission) || 0;\n    return (calculateAmount() * commissionNum) / 100;\n  };\n\n  const handleSubmit = () => {\n    if (!selectedProfile || !points || !rate) {\n      Alert.alert('Error', 'Please fill in all required fields');\n      return;\n    }\n\n    // Here you would typically make an API call to save the transaction\n    Alert.alert(\n      'Success',\n      'Transaction added successfully!',\n      [{ text: 'OK', onPress: () => navigation.goBack() }]\n    );\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>\n        {/* Transaction Type */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Transaction Type</Text>\n          <View style={styles.typeSelector}>\n            <TouchableOpacity\n              style={[\n                styles.typeButton,\n                transactionType === 'credit' && styles.typeButtonActive\n              ]}\n              onPress={() => setTransactionType('credit')}\n              testID=\"credit-type-button\"\n            >\n              <Text style={[\n                styles.typeButtonText,\n                transactionType === 'credit' && styles.typeButtonTextActive\n              ]}>\n                Credit\n              </Text>\n            </TouchableOpacity>\n            \n            <TouchableOpacity\n              style={[\n                styles.typeButton,\n                transactionType === 'debit' && styles.typeButtonActive\n              ]}\n              onPress={() => setTransactionType('debit')}\n              testID=\"debit-type-button\"\n            >\n              <Text style={[\n                styles.typeButtonText,\n                transactionType === 'debit' && styles.typeButtonTextActive\n              ]}>\n                Debit\n              </Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n\n        {/* Profile Selection */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Select Profile *</Text>\n          <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.profileScroll}>\n            <View style={styles.profileList}>\n              {profiles.map((profile) => (\n                <TouchableOpacity\n                  key={profile}\n                  style={[\n                    styles.profileChip,\n                    selectedProfile === profile && styles.profileChipActive\n                  ]}\n                  onPress={() => setSelectedProfile(profile)}\n                  testID={`profile-${profile.replace(' ', '-').toLowerCase()}`}\n                >\n                  <Text style={[\n                    styles.profileChipText,\n                    selectedProfile === profile && styles.profileChipTextActive\n                  ]}>\n                    {profile}\n                  </Text>\n                </TouchableOpacity>\n              ))}\n            </View>\n          </ScrollView>\n        </View>\n\n        {/* Transaction Details */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Transaction Details</Text>\n          \n          <View style={styles.inputContainer}>\n            <Text style={styles.inputLabel}>Points *</Text>\n            <TextInput\n              style={styles.input}\n              value={points}\n              onChangeText={setPoints}\n              placeholder=\"Enter points\"\n              keyboardType=\"numeric\"\n              testID=\"points-input\"\n            />\n          </View>\n\n          <View style={styles.inputContainer}>\n            <Text style={styles.inputLabel}>Rate per Point (₹) *</Text>\n            <TextInput\n              style={styles.input}\n              value={rate}\n              onChangeText={setRate}\n              placeholder=\"Enter rate\"\n              keyboardType=\"numeric\"\n              testID=\"rate-input\"\n            />\n          </View>\n\n          <View style={styles.inputContainer}>\n            <Text style={styles.inputLabel}>Commission (%)</Text>\n            <TextInput\n              style={styles.input}\n              value={commission}\n              onChangeText={setCommission}\n              placeholder=\"Enter commission percentage\"\n              keyboardType=\"numeric\"\n              testID=\"commission-input\"\n            />\n          </View>\n        </View>\n\n        {/* Calculation Summary */}\n        {points && rate && (\n          <View style={styles.section}>\n            <Text style={styles.sectionTitle}>Calculation Summary</Text>\n            <View style={styles.summaryCard}>\n              <View style={styles.summaryRow}>\n                <Text style={styles.summaryLabel}>Points:</Text>\n                <Text style={styles.summaryValue}>{parseInt(points).toLocaleString()}</Text>\n              </View>\n              \n              <View style={styles.summaryRow}>\n                <Text style={styles.summaryLabel}>Rate:</Text>\n                <Text style={styles.summaryValue}>₹{rate}</Text>\n              </View>\n              \n              <View style={styles.summaryRow}>\n                <Text style={styles.summaryLabel}>Total Amount:</Text>\n                <Text style={styles.summaryValuePrimary}>\n                  ₹{calculateAmount().toLocaleString()}\n                </Text>\n              </View>\n              \n              {commission && (\n                <View style={styles.summaryRow}>\n                  <Text style={styles.summaryLabel}>Commission ({commission}%):</Text>\n                  <Text style={styles.summaryValueSecondary}>\n                    ₹{calculateCommissionAmount().toLocaleString()}\n                  </Text>\n                </View>\n              )}\n            </View>\n          </View>\n        )}\n\n        {/* Submit Button */}\n        <View style={styles.buttonContainer}>\n          <TouchableOpacity\n            style={styles.submitButton}\n            onPress={handleSubmit}\n            testID=\"submit-transaction-button\"\n          >\n            <Text style={styles.submitButtonText}>Add Transaction</Text>\n          </TouchableOpacity>\n        </View>\n      </ScrollView>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f8fafc',\n  },\n  scrollView: {\n    flex: 1,\n  },\n  section: {\n    paddingHorizontal: 20,\n    paddingVertical: 20,\n  },\n  sectionTitle: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: '#1e293b',\n    marginBottom: 16,\n  },\n  typeSelector: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  typeButton: {\n    flex: 1,\n    paddingVertical: 12,\n    paddingHorizontal: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: '#d1d5db',\n    backgroundColor: '#ffffff',\n    alignItems: 'center',\n  },\n  typeButtonActive: {\n    borderColor: '#3b82f6',\n    backgroundColor: '#3b82f6',\n  },\n  typeButtonText: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: '#64748b',\n  },\n  typeButtonTextActive: {\n    color: '#ffffff',\n  },\n  profileScroll: {\n    marginHorizontal: -20,\n    paddingHorizontal: 20,\n  },\n  profileList: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  profileChip: {\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 20,\n    borderWidth: 1,\n    borderColor: '#d1d5db',\n    backgroundColor: '#ffffff',\n  },\n  profileChipActive: {\n    borderColor: '#3b82f6',\n    backgroundColor: '#3b82f6',\n  },\n  profileChipText: {\n    fontSize: 14,\n    color: '#64748b',\n    fontWeight: '500',\n  },\n  profileChipTextActive: {\n    color: '#ffffff',\n  },\n  inputContainer: {\n    marginBottom: 16,\n  },\n  inputLabel: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: '#374151',\n    marginBottom: 8,\n  },\n  input: {\n    backgroundColor: '#ffffff',\n    borderWidth: 1,\n    borderColor: '#d1d5db',\n    borderRadius: 8,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    fontSize: 16,\n  },\n  summaryCard: {\n    backgroundColor: '#ffffff',\n    borderRadius: 12,\n    padding: 16,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 3,\n    elevation: 3,\n  },\n  summaryRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingVertical: 8,\n  },\n  summaryLabel: {\n    fontSize: 14,\n    color: '#64748b',\n  },\n  summaryValue: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: '#1e293b',\n  },\n  summaryValuePrimary: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: '#059669',\n  },\n  summaryValueSecondary: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: '#3b82f6',\n  },\n  buttonContainer: {\n    paddingHorizontal: 20,\n    paddingVertical: 20,\n  },\n  submitButton: {\n    backgroundColor: '#3b82f6',\n    paddingVertical: 16,\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  submitButtonText: {\n    color: '#ffffff',\n    fontSize: 16,\n    fontWeight: 'bold',\n  },\n});","size_bytes":9809},"mobile/src/screens/DashboardScreen.tsx":{"content":"import React from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  ScrollView,\n  TouchableOpacity,\n  SafeAreaView,\n} from 'react-native';\nimport type { DashboardScreenProps } from '../types/navigation';\nimport { apiClient } from '../utils/api';\nimport { useAuth } from '../../App';\n\nexport default function DashboardScreen({ navigation }: DashboardScreenProps) {\n  const { logout } = useAuth();\n  \n  const handleLogout = async () => {\n    await logout();\n    // Navigation happens automatically via auth context state change\n  };\n\n  const metricsData = [\n    { title: 'Total Profiles', value: '24', icon: '👥', color: '#3b82f6' },\n    { title: 'Active Transactions', value: '12', icon: '💱', color: '#10b981' },\n    { title: 'Weekly P&L', value: '+₹5,240', icon: '📈', color: '#f59e0b' },\n    { title: 'Pending Settlements', value: '3', icon: '📤', color: '#ef4444' },\n  ];\n\n  const recentTransactions = [\n    { id: 1, profile: 'Mumbai Kings', type: 'Credit', amount: '+₹2,500', time: '2 hours ago' },\n    { id: 2, profile: 'Chennai Express', type: 'Debit', amount: '-₹1,200', time: '4 hours ago' },\n    { id: 3, profile: 'Delhi Daredevils', type: 'Credit', amount: '+₹3,800', time: '6 hours ago' },\n    { id: 4, profile: 'Kolkata Knights', type: 'Debit', amount: '-₹900', time: '8 hours ago' },\n  ];\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>\n        {/* Header */}\n        <View style={styles.header}>\n          <View>\n            <Text style={styles.welcomeText}>Welcome back!</Text>\n            <Text style={styles.headerTitle}>Dashboard Overview</Text>\n          </View>\n          <TouchableOpacity onPress={handleLogout} testID=\"logout-button\">\n            <Text style={styles.logoutText}>Logout</Text>\n          </TouchableOpacity>\n        </View>\n\n        {/* Metrics Cards */}\n        <View style={styles.metricsContainer}>\n          <Text style={styles.sectionTitle}>Key Metrics</Text>\n          <View style={styles.metricsGrid}>\n            {metricsData.map((metric, index) => (\n              <View key={index} style={styles.metricCard} testID={`metric-card-${index}`}>\n                <View style={[styles.metricIcon, { backgroundColor: `${metric.color}20` }]}>\n                  <Text style={styles.metricIconText}>{metric.icon}</Text>\n                </View>\n                <Text style={[styles.metricValue, { color: metric.color }]}>\n                  {metric.value}\n                </Text>\n                <Text style={styles.metricTitle}>{metric.title}</Text>\n              </View>\n            ))}\n          </View>\n        </View>\n\n        {/* Recent Transactions */}\n        <View style={styles.transactionsContainer}>\n          <View style={styles.sectionHeader}>\n            <Text style={styles.sectionTitle}>Recent Transactions</Text>\n            <TouchableOpacity \n              onPress={() => navigation.navigate('Transactions')}\n              testID=\"view-all-transactions-button\"\n            >\n              <Text style={styles.viewAllText}>View All</Text>\n            </TouchableOpacity>\n          </View>\n          \n          <View style={styles.transactionsList}>\n            {recentTransactions.map((transaction) => (\n              <View key={transaction.id} style={styles.transactionItem} testID={`transaction-${transaction.id}`}>\n                <View style={styles.transactionInfo}>\n                  <Text style={styles.transactionProfile}>{transaction.profile}</Text>\n                  <Text style={styles.transactionTime}>{transaction.time}</Text>\n                </View>\n                <View style={styles.transactionAmount}>\n                  <Text \n                    style={[\n                      styles.transactionAmountText,\n                      { color: transaction.type === 'Credit' ? '#10b981' : '#ef4444' }\n                    ]}\n                  >\n                    {transaction.amount}\n                  </Text>\n                  <Text style={styles.transactionType}>{transaction.type}</Text>\n                </View>\n              </View>\n            ))}\n          </View>\n        </View>\n\n        {/* Quick Actions */}\n        <View style={styles.actionsContainer}>\n          <Text style={styles.sectionTitle}>Quick Actions</Text>\n          <View style={styles.actionButtons}>\n            <TouchableOpacity \n              style={styles.actionButton}\n              onPress={() => navigation.navigate('Transactions')}\n              testID=\"add-transaction-button\"\n            >\n              <Text style={styles.actionButtonIcon}>💱</Text>\n              <Text style={styles.actionButtonText}>Add Transaction</Text>\n            </TouchableOpacity>\n            \n            <TouchableOpacity \n              style={styles.actionButton}\n              onPress={() => navigation.navigate('Profiles')}\n              testID=\"manage-profiles-button\"\n            >\n              <Text style={styles.actionButtonIcon}>👥</Text>\n              <Text style={styles.actionButtonText}>Manage Profiles</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      </ScrollView>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f8fafc',\n  },\n  scrollView: {\n    flex: 1,\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 20,\n    paddingTop: 10,\n  },\n  welcomeText: {\n    fontSize: 14,\n    color: '#64748b',\n  },\n  headerTitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#1e293b',\n  },\n  logoutText: {\n    color: '#ef4444',\n    fontSize: 16,\n    fontWeight: '500',\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#1e293b',\n    marginBottom: 16,\n  },\n  metricsContainer: {\n    paddingHorizontal: 20,\n    marginBottom: 30,\n  },\n  metricsGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 12,\n  },\n  metricCard: {\n    backgroundColor: '#ffffff',\n    borderRadius: 12,\n    padding: 16,\n    alignItems: 'center',\n    width: '47%',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 3,\n    elevation: 3,\n  },\n  metricIcon: {\n    width: 48,\n    height: 48,\n    borderRadius: 24,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginBottom: 8,\n  },\n  metricIconText: {\n    fontSize: 20,\n  },\n  metricValue: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    marginBottom: 4,\n  },\n  metricTitle: {\n    fontSize: 12,\n    color: '#64748b',\n    textAlign: 'center',\n  },\n  transactionsContainer: {\n    paddingHorizontal: 20,\n    marginBottom: 30,\n  },\n  sectionHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 16,\n  },\n  viewAllText: {\n    color: '#3b82f6',\n    fontSize: 14,\n    fontWeight: '500',\n  },\n  transactionsList: {\n    backgroundColor: '#ffffff',\n    borderRadius: 12,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 3,\n    elevation: 3,\n  },\n  transactionItem: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: '#f1f5f9',\n  },\n  transactionInfo: {\n    flex: 1,\n  },\n  transactionProfile: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: '#1e293b',\n    marginBottom: 4,\n  },\n  transactionTime: {\n    fontSize: 12,\n    color: '#64748b',\n  },\n  transactionAmount: {\n    alignItems: 'flex-end',\n  },\n  transactionAmountText: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    marginBottom: 2,\n  },\n  transactionType: {\n    fontSize: 12,\n    color: '#64748b',\n  },\n  actionsContainer: {\n    paddingHorizontal: 20,\n    paddingBottom: 30,\n  },\n  actionButtons: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  actionButton: {\n    backgroundColor: '#ffffff',\n    borderRadius: 12,\n    padding: 20,\n    alignItems: 'center',\n    flex: 1,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 3,\n    elevation: 3,\n  },\n  actionButtonIcon: {\n    fontSize: 24,\n    marginBottom: 8,\n  },\n  actionButtonText: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: '#1e293b',\n    textAlign: 'center',\n  },\n});","size_bytes":8317},"mobile/src/screens/LoginScreen.tsx":{"content":"import React, { useState } from 'react';\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  StyleSheet,\n  SafeAreaView,\n  Alert,\n  ActivityIndicator,\n} from 'react-native';\nimport type { LoginScreenProps } from '../types/navigation';\nimport { apiClient } from '../utils/api';\nimport { useAuth } from '../../App';\n\nexport default function LoginScreen({ navigation }: LoginScreenProps) {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const { login } = useAuth();\n\n  const handleLogin = async () => {\n    if (!username.trim() || !password.trim()) {\n      Alert.alert('Error', 'Please enter both username and password');\n      return;\n    }\n\n    setIsLoading(true);\n    \n    try {\n      const result = await apiClient.login(username, password);\n      \n      if (result) {\n        await login(result.token);\n        // Navigation happens automatically via auth context state change\n      } else {\n        Alert.alert('Error', 'Invalid username or password');\n      }\n    } catch (error) {\n      Alert.alert('Error', 'Login failed. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.content}>\n        {/* Header */}\n        <View style={styles.header}>\n          <View style={styles.logoContainer}>\n            <Text style={styles.logoText}>📈</Text>\n          </View>\n          <Text style={styles.title}>Welcome Back</Text>\n          <Text style={styles.subtitle}>\n            Sign in to access your inventory management system\n          </Text>\n        </View>\n\n        {/* Form */}\n        <View style={styles.form}>\n          <View style={styles.inputContainer}>\n            <Text style={styles.label}>Username</Text>\n            <TextInput\n              style={styles.input}\n              value={username}\n              onChangeText={setUsername}\n              placeholder=\"Enter your username\"\n              autoCapitalize=\"none\"\n              testID=\"username-input\"\n            />\n          </View>\n\n          <View style={styles.inputContainer}>\n            <Text style={styles.label}>Password</Text>\n            <TextInput\n              style={styles.input}\n              value={password}\n              onChangeText={setPassword}\n              placeholder=\"Enter your password\"\n              secureTextEntry\n              testID=\"password-input\"\n            />\n          </View>\n\n          <TouchableOpacity\n            style={[styles.loginButton, isLoading && styles.loginButtonDisabled]}\n            onPress={handleLogin}\n            disabled={isLoading}\n            testID=\"login-button\"\n          >\n            {isLoading ? (\n              <ActivityIndicator color=\"#ffffff\" />\n            ) : (\n              <Text style={styles.loginButtonText}>Sign In</Text>\n            )}\n          </TouchableOpacity>\n        </View>\n\n        {/* Demo Credentials */}\n        <View style={styles.demoCredentials}>\n          <Text style={styles.demoTitle}>Demo Credentials:</Text>\n          <Text style={styles.demoText}>\n            Bookie: admin / admin123{'\\n'}\n            Assistant: assistant / assistant123\n          </Text>\n        </View>\n      </View>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f8fafc',\n  },\n  content: {\n    flex: 1,\n    paddingHorizontal: 24,\n    paddingVertical: 32,\n    justifyContent: 'center',\n  },\n  header: {\n    alignItems: 'center',\n    marginBottom: 40,\n  },\n  logoContainer: {\n    width: 60,\n    height: 60,\n    backgroundColor: '#3b82f6',\n    borderRadius: 15,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginBottom: 20,\n  },\n  logoText: {\n    fontSize: 30,\n  },\n  title: {\n    fontSize: 28,\n    fontWeight: 'bold',\n    color: '#1e293b',\n    marginBottom: 8,\n  },\n  subtitle: {\n    fontSize: 16,\n    color: '#64748b',\n    textAlign: 'center',\n  },\n  form: {\n    marginBottom: 40,\n  },\n  inputContainer: {\n    marginBottom: 20,\n  },\n  label: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: '#374151',\n    marginBottom: 8,\n  },\n  input: {\n    backgroundColor: '#ffffff',\n    borderWidth: 1,\n    borderColor: '#d1d5db',\n    borderRadius: 8,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    fontSize: 16,\n  },\n  loginButton: {\n    backgroundColor: '#3b82f6',\n    paddingVertical: 16,\n    borderRadius: 8,\n    alignItems: 'center',\n    marginTop: 20,\n  },\n  loginButtonDisabled: {\n    backgroundColor: '#9ca3af',\n  },\n  loginButtonText: {\n    color: '#ffffff',\n    fontSize: 16,\n    fontWeight: 'bold',\n  },\n  demoCredentials: {\n    backgroundColor: '#f1f5f9',\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: '#e2e8f0',\n  },\n  demoTitle: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: '#374151',\n    marginBottom: 4,\n  },\n  demoText: {\n    fontSize: 12,\n    color: '#64748b',\n  },\n});","size_bytes":4973},"mobile/src/screens/ProfilesScreen.tsx":{"content":"import React from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  ScrollView,\n  TouchableOpacity,\n  SafeAreaView,\n} from 'react-native';\nimport type { ProfilesScreenProps } from '../types/navigation';\n\nexport default function ProfilesScreen({ navigation }: ProfilesScreenProps) {\n  const uplinks = [\n    { id: 1, name: 'Premium Uplink', contact: '+91 9876543210', rate: '₹95/point', status: 'Active' },\n    { id: 2, name: 'Elite Sports', contact: '+91 8765432109', rate: '₹92/point', status: 'Active' },\n    { id: 3, name: 'Super Betting', contact: '+91 7654321098', rate: '₹90/point', status: 'Inactive' },\n  ];\n\n  const downlinks = [\n    { id: 1, name: 'Mumbai Kings', contact: '+91 9988776655', rate: '₹100/point', commission: '5%', status: 'Active' },\n    { id: 2, name: 'Chennai Express', contact: '+91 8877665544', rate: '₹98/point', commission: '3%', status: 'Active' },\n    { id: 3, name: 'Delhi Daredevils', contact: '+91 7766554433', rate: '₹96/point', commission: '4%', status: 'Active' },\n    { id: 4, name: 'Kolkata Knights', contact: '+91 6655443322', rate: '₹95/point', commission: '2%', status: 'Inactive' },\n  ];\n\n  const ProfileCard = ({ profile, type }: { profile: any; type: 'uplink' | 'downlink' }) => (\n    <TouchableOpacity style={styles.profileCard} testID={`${type}-${profile.id}`}>\n      <View style={styles.profileHeader}>\n        <View>\n          <Text style={styles.profileName}>{profile.name}</Text>\n          <Text style={styles.profileContact}>{profile.contact}</Text>\n        </View>\n        <View style={[\n          styles.statusBadge,\n          { backgroundColor: profile.status === 'Active' ? '#dcfce7' : '#fef2f2' }\n        ]}>\n          <Text style={[\n            styles.statusText,\n            { color: profile.status === 'Active' ? '#16a34a' : '#dc2626' }\n          ]}>\n            {profile.status}\n          </Text>\n        </View>\n      </View>\n      \n      <View style={styles.profileDetails}>\n        <View style={styles.detailItem}>\n          <Text style={styles.detailLabel}>Rate</Text>\n          <Text style={styles.detailValue}>{profile.rate}</Text>\n        </View>\n        {profile.commission && (\n          <View style={styles.detailItem}>\n            <Text style={styles.detailLabel}>Commission</Text>\n            <Text style={styles.detailValue}>{profile.commission}</Text>\n          </View>\n        )}\n      </View>\n    </TouchableOpacity>\n  );\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>\n        {/* Uplinks Section */}\n        <View style={styles.section}>\n          <View style={styles.sectionHeader}>\n            <Text style={styles.sectionTitle}>Uplinks</Text>\n            <Text style={styles.sectionCount}>({uplinks.length})</Text>\n          </View>\n          <Text style={styles.sectionDescription}>\n            Your inventory suppliers with negotiated rates\n          </Text>\n          \n          <View style={styles.profilesList}>\n            {uplinks.map((uplink) => (\n              <ProfileCard key={uplink.id} profile={uplink} type=\"uplink\" />\n            ))}\n          </View>\n          \n          <TouchableOpacity style={styles.addButton} testID=\"add-uplink-button\">\n            <Text style={styles.addButtonText}>+ Add Uplink</Text>\n          </TouchableOpacity>\n        </View>\n\n        {/* Downlinks Section */}\n        <View style={styles.section}>\n          <View style={styles.sectionHeader}>\n            <Text style={styles.sectionTitle}>Downlines</Text>\n            <Text style={styles.sectionCount}>({downlinks.length})</Text>\n          </View>\n          <Text style={styles.sectionDescription}>\n            Your agents with commission structures\n          </Text>\n          \n          <View style={styles.profilesList}>\n            {downlinks.map((downlink) => (\n              <ProfileCard key={downlink.id} profile={downlink} type=\"downlink\" />\n            ))}\n          </View>\n          \n          <TouchableOpacity style={styles.addButton} testID=\"add-downlink-button\">\n            <Text style={styles.addButtonText}>+ Add Downline</Text>\n          </TouchableOpacity>\n        </View>\n      </ScrollView>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f8fafc',\n  },\n  scrollView: {\n    flex: 1,\n  },\n  section: {\n    paddingHorizontal: 20,\n    paddingVertical: 20,\n  },\n  sectionHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  sectionTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: '#1e293b',\n  },\n  sectionCount: {\n    fontSize: 16,\n    color: '#64748b',\n    marginLeft: 8,\n  },\n  sectionDescription: {\n    fontSize: 14,\n    color: '#64748b',\n    marginBottom: 20,\n  },\n  profilesList: {\n    gap: 12,\n    marginBottom: 20,\n  },\n  profileCard: {\n    backgroundColor: '#ffffff',\n    borderRadius: 12,\n    padding: 16,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 3,\n    elevation: 3,\n  },\n  profileHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    marginBottom: 12,\n  },\n  profileName: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: '#1e293b',\n    marginBottom: 4,\n  },\n  profileContact: {\n    fontSize: 14,\n    color: '#64748b',\n  },\n  statusBadge: {\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 6,\n  },\n  statusText: {\n    fontSize: 12,\n    fontWeight: '500',\n  },\n  profileDetails: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  detailItem: {\n    flex: 1,\n  },\n  detailLabel: {\n    fontSize: 12,\n    color: '#64748b',\n    marginBottom: 2,\n  },\n  detailValue: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: '#1e293b',\n  },\n  addButton: {\n    backgroundColor: '#3b82f6',\n    paddingVertical: 14,\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  addButtonText: {\n    color: '#ffffff',\n    fontSize: 16,\n    fontWeight: '500',\n  },\n});","size_bytes":6038},"mobile/src/screens/TransactionsScreen.tsx":{"content":"import React from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  ScrollView,\n  TouchableOpacity,\n  SafeAreaView,\n} from 'react-native';\nimport type { TransactionsScreenProps } from '../types/navigation';\n\nexport default function TransactionsScreen({ navigation }: TransactionsScreenProps) {\n  const transactions = [\n    {\n      id: 1,\n      profile: 'Mumbai Kings',\n      type: 'credit',\n      points: 2500,\n      rate: 100,\n      amount: 250000,\n      commission: 12500,\n      date: '2024-01-15',\n      time: '14:30',\n      status: 'completed'\n    },\n    {\n      id: 2,\n      profile: 'Chennai Express',\n      type: 'debit',\n      points: 1200,\n      rate: 98,\n      amount: 117600,\n      commission: 3528,\n      date: '2024-01-15',\n      time: '12:15',\n      status: 'completed'\n    },\n    {\n      id: 3,\n      profile: 'Delhi Daredevils',\n      type: 'credit',\n      points: 3800,\n      rate: 96,\n      amount: 364800,\n      commission: 14592,\n      date: '2024-01-14',\n      time: '16:45',\n      status: 'completed'\n    },\n    {\n      id: 4,\n      profile: 'Kolkata Knights',\n      type: 'debit',\n      points: 900,\n      rate: 95,\n      amount: 85500,\n      commission: 1710,\n      date: '2024-01-14',\n      time: '10:20',\n      status: 'pending'\n    },\n  ];\n\n  const formatAmount = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      minimumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const TransactionCard = ({ transaction }: { transaction: any }) => (\n    <TouchableOpacity \n      style={styles.transactionCard} \n      testID={`transaction-${transaction.id}`}\n    >\n      <View style={styles.transactionHeader}>\n        <View>\n          <Text style={styles.profileName}>{transaction.profile}</Text>\n          <Text style={styles.transactionDate}>\n            {transaction.date} • {transaction.time}\n          </Text>\n        </View>\n        \n        <View style={styles.statusContainer}>\n          <View style={[\n            styles.statusBadge,\n            { backgroundColor: transaction.status === 'completed' ? '#dcfce7' : '#fef3c7' }\n          ]}>\n            <Text style={[\n              styles.statusText,\n              { color: transaction.status === 'completed' ? '#16a34a' : '#d97706' }\n            ]}>\n              {transaction.status === 'completed' ? 'Completed' : 'Pending'}\n            </Text>\n          </View>\n          \n          <View style={[\n            styles.typeBadge,\n            { backgroundColor: transaction.type === 'credit' ? '#dbeafe' : '#fecaca' }\n          ]}>\n            <Text style={[\n              styles.typeText,\n              { color: transaction.type === 'credit' ? '#2563eb' : '#dc2626' }\n            ]}>\n              {transaction.type === 'credit' ? 'Credit' : 'Debit'}\n            </Text>\n          </View>\n        </View>\n      </View>\n      \n      <View style={styles.transactionDetails}>\n        <View style={styles.detailRow}>\n          <View style={styles.detailItem}>\n            <Text style={styles.detailLabel}>Points</Text>\n            <Text style={styles.detailValue}>{transaction.points.toLocaleString()}</Text>\n          </View>\n          <View style={styles.detailItem}>\n            <Text style={styles.detailLabel}>Rate</Text>\n            <Text style={styles.detailValue}>₹{transaction.rate}</Text>\n          </View>\n        </View>\n        \n        <View style={styles.detailRow}>\n          <View style={styles.detailItem}>\n            <Text style={styles.detailLabel}>Amount</Text>\n            <Text style={[styles.detailValue, styles.amountText]}>\n              {formatAmount(transaction.amount)}\n            </Text>\n          </View>\n          <View style={styles.detailItem}>\n            <Text style={styles.detailLabel}>Commission</Text>\n            <Text style={[styles.detailValue, styles.commissionText]}>\n              {formatAmount(transaction.commission)}\n            </Text>\n          </View>\n        </View>\n      </View>\n    </TouchableOpacity>\n  );\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.header}>\n        <Text style={styles.headerTitle}>All Transactions</Text>\n        <TouchableOpacity \n          style={styles.addButton}\n          onPress={() => navigation.navigate('AddTransaction')}\n          testID=\"add-transaction-button\"\n        >\n          <Text style={styles.addButtonText}>+ Add</Text>\n        </TouchableOpacity>\n      </View>\n      \n      <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>\n        <View style={styles.transactionsList}>\n          {transactions.map((transaction) => (\n            <TransactionCard key={transaction.id} transaction={transaction} />\n          ))}\n        </View>\n        \n        {/* Load More Button */}\n        <TouchableOpacity style={styles.loadMoreButton} testID=\"load-more-button\">\n          <Text style={styles.loadMoreText}>Load More Transactions</Text>\n        </TouchableOpacity>\n      </ScrollView>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f8fafc',\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 20,\n    paddingBottom: 10,\n  },\n  headerTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: '#1e293b',\n  },\n  addButton: {\n    backgroundColor: '#3b82f6',\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 6,\n  },\n  addButtonText: {\n    color: '#ffffff',\n    fontSize: 14,\n    fontWeight: '500',\n  },\n  scrollView: {\n    flex: 1,\n  },\n  transactionsList: {\n    paddingHorizontal: 20,\n    gap: 12,\n  },\n  transactionCard: {\n    backgroundColor: '#ffffff',\n    borderRadius: 12,\n    padding: 16,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 3,\n    elevation: 3,\n  },\n  transactionHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    marginBottom: 16,\n  },\n  profileName: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: '#1e293b',\n    marginBottom: 4,\n  },\n  transactionDate: {\n    fontSize: 12,\n    color: '#64748b',\n  },\n  statusContainer: {\n    alignItems: 'flex-end',\n    gap: 6,\n  },\n  statusBadge: {\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 6,\n  },\n  statusText: {\n    fontSize: 10,\n    fontWeight: '500',\n  },\n  typeBadge: {\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 6,\n  },\n  typeText: {\n    fontSize: 10,\n    fontWeight: '500',\n  },\n  transactionDetails: {\n    gap: 12,\n  },\n  detailRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  detailItem: {\n    flex: 1,\n  },\n  detailLabel: {\n    fontSize: 12,\n    color: '#64748b',\n    marginBottom: 4,\n  },\n  detailValue: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: '#1e293b',\n  },\n  amountText: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: '#059669',\n  },\n  commissionText: {\n    color: '#3b82f6',\n  },\n  loadMoreButton: {\n    backgroundColor: '#ffffff',\n    marginHorizontal: 20,\n    marginVertical: 20,\n    paddingVertical: 16,\n    borderRadius: 8,\n    alignItems: 'center',\n    borderWidth: 1,\n    borderColor: '#e2e8f0',\n  },\n  loadMoreText: {\n    color: '#64748b',\n    fontSize: 14,\n    fontWeight: '500',\n  },\n});","size_bytes":7348},"mobile/src/screens/WelcomeScreen.tsx":{"content":"import React from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TouchableOpacity,\n  SafeAreaView,\n  Dimensions,\n} from 'react-native';\nimport type { WelcomeScreenProps } from '../types/navigation';\n\nconst { width, height } = Dimensions.get('window');\n\nexport default function WelcomeScreen({ navigation }: WelcomeScreenProps) {\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.content}>\n        {/* Header */}\n        <View style={styles.header}>\n          <View style={styles.logoContainer}>\n            <Text style={styles.logoText}>📈</Text>\n          </View>\n          <Text style={styles.title}>Bookie System</Text>\n          <Text style={styles.subtitle}>\n            Digitize Your Bookie Operations\n          </Text>\n        </View>\n\n        {/* Features */}\n        <View style={styles.featuresContainer}>\n          <Text style={styles.featuresTitle}>Powerful Features</Text>\n          \n          <View style={styles.featuresList}>\n            <View style={styles.featureItem}>\n              <Text style={styles.featureIcon}>🏢</Text>\n              <Text style={styles.featureText}>Inventory Management</Text>\n            </View>\n            \n            <View style={styles.featureItem}>\n              <Text style={styles.featureIcon}>🧮</Text>\n              <Text style={styles.featureText}>Automated Ledger</Text>\n            </View>\n            \n            <View style={styles.featureItem}>\n              <Text style={styles.featureIcon}>💬</Text>\n              <Text style={styles.featureText}>WhatsApp Integration</Text>\n            </View>\n            \n            <View style={styles.featureItem}>\n              <Text style={styles.featureIcon}>📊</Text>\n              <Text style={styles.featureText}>Custom Reports</Text>\n            </View>\n          </View>\n        </View>\n\n        {/* Call to Action */}\n        <View style={styles.ctaContainer}>\n          <TouchableOpacity\n            style={styles.primaryButton}\n            onPress={() => navigation.navigate('Login')}\n            testID=\"get-started-button\"\n          >\n            <Text style={styles.primaryButtonText}>Get Started</Text>\n          </TouchableOpacity>\n          \n          <Text style={styles.credentialsText}>\n            Demo Credentials:{'\\n'}\n            Bookie: admin / admin123{'\\n'}\n            Assistant: assistant / assistant123\n          </Text>\n        </View>\n      </View>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f8fafc',\n  },\n  content: {\n    flex: 1,\n    paddingHorizontal: 24,\n    paddingVertical: 32,\n    justifyContent: 'space-between',\n  },\n  header: {\n    alignItems: 'center',\n    marginBottom: 40,\n  },\n  logoContainer: {\n    width: 80,\n    height: 80,\n    backgroundColor: '#3b82f6',\n    borderRadius: 20,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginBottom: 20,\n  },\n  logoText: {\n    fontSize: 40,\n  },\n  title: {\n    fontSize: 32,\n    fontWeight: 'bold',\n    color: '#1e293b',\n    marginBottom: 8,\n  },\n  subtitle: {\n    fontSize: 18,\n    color: '#64748b',\n    textAlign: 'center',\n  },\n  featuresContainer: {\n    flex: 1,\n    marginVertical: 40,\n  },\n  featuresTitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#1e293b',\n    textAlign: 'center',\n    marginBottom: 30,\n  },\n  featuresList: {\n    gap: 20,\n  },\n  featureItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: '#ffffff',\n    padding: 20,\n    borderRadius: 12,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 1,\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 3,\n    elevation: 3,\n  },\n  featureIcon: {\n    fontSize: 24,\n    marginRight: 16,\n  },\n  featureText: {\n    fontSize: 16,\n    color: '#1e293b',\n    fontWeight: '500',\n  },\n  ctaContainer: {\n    alignItems: 'center',\n  },\n  primaryButton: {\n    backgroundColor: '#3b82f6',\n    paddingHorizontal: 40,\n    paddingVertical: 16,\n    borderRadius: 12,\n    width: '100%',\n    alignItems: 'center',\n    marginBottom: 20,\n  },\n  primaryButtonText: {\n    color: '#ffffff',\n    fontSize: 18,\n    fontWeight: 'bold',\n  },\n  credentialsText: {\n    fontSize: 12,\n    color: '#64748b',\n    textAlign: 'center',\n    backgroundColor: '#f1f5f9',\n    padding: 12,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: '#e2e8f0',\n  },\n});","size_bytes":4375},"mobile/src/types/navigation.ts":{"content":"import type { NativeStackScreenProps } from '@react-navigation/native-stack';\n\nexport type RootStackParamList = {\n  Welcome: undefined;\n  Login: undefined;\n  Dashboard: undefined;\n  Profiles: undefined;\n  Transactions: undefined;\n  AddTransaction: undefined;\n};\n\nexport type WelcomeScreenProps = NativeStackScreenProps<RootStackParamList, 'Welcome'>;\nexport type LoginScreenProps = NativeStackScreenProps<RootStackParamList, 'Login'>;\nexport type DashboardScreenProps = NativeStackScreenProps<RootStackParamList, 'Dashboard'>;\nexport type ProfilesScreenProps = NativeStackScreenProps<RootStackParamList, 'Profiles'>;\nexport type TransactionsScreenProps = NativeStackScreenProps<RootStackParamList, 'Transactions'>;\nexport type AddTransactionScreenProps = NativeStackScreenProps<RootStackParamList, 'AddTransaction'>;","size_bytes":816},"mobile/src/utils/api.ts":{"content":"import * as SecureStore from 'expo-secure-store';\n\nconst API_BASE_URL = process.env.EXPO_PUBLIC_API_URL || 'http://localhost:5000/api';\n\ninterface ApiResponse<T> {\n  data: T;\n  success: boolean;\n  error?: string;\n}\n\nclass ApiClient {\n  private async getAuthToken(): Promise<string | null> {\n    try {\n      return await SecureStore.getItemAsync('auth_token');\n    } catch {\n      return null;\n    }\n  }\n\n  private async request<T>(\n    endpoint: string, \n    options: RequestInit = {}\n  ): Promise<ApiResponse<T>> {\n    const token = await this.getAuthToken();\n    \n    const config: RequestInit = {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        ...(token && { Authorization: `Bearer ${token}` }),\n        ...options.headers,\n      },\n    };\n\n    try {\n      const response = await fetch(`${API_BASE_URL}${endpoint}`, config);\n      const data = await response.json();\n      \n      if (!response.ok) {\n        throw new Error(data.message || 'API request failed');\n      }\n      \n      return { data, success: true };\n    } catch (error) {\n      return { \n        data: {} as T, \n        success: false, \n        error: error instanceof Error ? error.message : 'Unknown error' \n      };\n    }\n  }\n\n  async login(username: string, password: string): Promise<{ token: string; user: any } | null> {\n    // Demo implementation - replace with actual API call\n    if ((username === 'admin' && password === 'admin123') || \n        (username === 'assistant' && password === 'assistant123')) {\n      \n      const token = `demo_token_${username}_${Date.now()}`;\n      await SecureStore.setItemAsync('auth_token', token);\n      \n      return {\n        token,\n        user: {\n          username,\n          role: username === 'admin' ? 'bookie' : 'assistant'\n        }\n      };\n    }\n    return null;\n  }\n\n  async logout(): Promise<void> {\n    await SecureStore.deleteItemAsync('auth_token');\n  }\n\n  async get<T>(endpoint: string): Promise<ApiResponse<T>> {\n    return this.request<T>(endpoint, { method: 'GET' });\n  }\n\n  async post<T>(endpoint: string, data: any): Promise<ApiResponse<T>> {\n    return this.request<T>(endpoint, {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  }\n}\n\nexport const apiClient = new ApiClient();","size_bytes":2271},"client/src/components/cards/stat-card.tsx":{"content":"import { LucideIcon } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\ninterface StatCardProps {\n  title: string;\n  value: string;\n  icon: LucideIcon;\n  iconColor: string;\n  iconBgColor: string;\n  valueColor?: string;\n}\n\nexport default function StatCard({\n  title,\n  value,\n  icon: Icon,\n  iconColor,\n  iconBgColor,\n  valueColor = \"text-primary\",\n}: StatCardProps) {\n  return (\n    <Card data-testid={`stat-card-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n      <CardContent className=\"pt-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-sm text-muted-foreground\" data-testid=\"stat-title\">\n              {title}\n            </p>\n            <p className={`text-2xl font-bold ${valueColor}`} data-testid=\"stat-value\">\n              {value}\n            </p>\n          </div>\n          <div className={`${iconBgColor} p-3 rounded-full`}>\n            <Icon className={`${iconColor} h-5 w-5`} />\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1059},"client/src/components/layout/mobile-header.tsx":{"content":"import { Menu } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface MobileHeaderProps {\n  onMenuClick: () => void;\n}\n\nexport default function MobileHeader({ onMenuClick }: MobileHeaderProps) {\n  return (\n    <div className=\"md:hidden bg-card border-b border-border p-4 flex items-center justify-between\">\n      <h1 className=\"text-lg font-semibold\" data-testid=\"mobile-header-title\">\n        Bookie Inventory\n      </h1>\n      <Button\n        variant=\"ghost\"\n        size=\"icon\"\n        onClick={onMenuClick}\n        data-testid=\"mobile-menu-button\"\n      >\n        <Menu className=\"h-5 w-5 text-muted-foreground\" />\n      </Button>\n    </div>\n  );\n}\n","size_bytes":680},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  LayoutDashboard,\n  Users,\n  ArrowLeftRight,\n  Calculator,\n  Send,\n  BarChart3,\n  UserCog,\n  History,\n  LogOut,\n} from \"lucide-react\";\n\nconst navigationItems = [\n  { path: \"/dashboard\", label: \"Dashboard\", icon: LayoutDashboard },\n  { path: \"/profiles\", label: \"Profiles\", icon: Users },\n  { path: \"/transactions\", label: \"Transactions\", icon: ArrowLeftRight },\n  { path: \"/ledger\", label: \"Ledger\", icon: Calculator },\n  { path: \"/settlement\", label: \"Settlement\", icon: Send },\n  { path: \"/reports\", label: \"Reports\", icon: BarChart3 },\n  { path: \"/users\", label: \"Users\", icon: UserCog },\n  { path: \"/audit\", label: \"Audit Trail\", icon: History },\n];\n\ninterface SidebarProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function Sidebar({ isOpen, onClose }: SidebarProps) {\n  const [location, setLocation] = useLocation();\n  \n  const handleLogout = () => {\n    localStorage.removeItem(\"isLoggedIn\");\n    localStorage.removeItem(\"userRole\");\n    localStorage.removeItem(\"username\");\n    setLocation(\"/\");\n    onClose();\n  };\n\n  return (\n    <>\n      {/* Overlay */}\n      {isOpen && (\n        <div\n          className=\"fixed inset-0 bg-black bg-opacity-50 z-40 md:hidden\"\n          onClick={onClose}\n          data-testid=\"sidebar-overlay\"\n        />\n      )}\n      \n      {/* Sidebar */}\n      <aside\n        className={cn(\n          \"fixed md:static inset-y-0 left-0 z-50 w-64 bg-card border-r border-border shadow-lg md:shadow-none transition-transform duration-300 flex flex-col\",\n          isOpen ? \"translate-x-0\" : \"-translate-x-full md:translate-x-0\"\n        )}\n        data-testid=\"sidebar\"\n      >\n        <div className=\"p-4 border-b border-border hidden md:block\">\n          <h1 className=\"text-xl font-bold text-primary\" data-testid=\"sidebar-title\">\n            Bookie System\n          </h1>\n        </div>\n        \n        <nav className=\"p-4 space-y-2 flex flex-col h-full\">\n          {navigationItems.map((item) => {\n            const Icon = item.icon;\n            const isActive = location === item.path;\n            \n            return (\n              <Link\n                key={item.path}\n                href={item.path}\n                onClick={onClose}\n                data-testid={`nav-link-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n              >\n                <a\n                  className={cn(\n                    \"flex items-center space-x-3 p-3 rounded-lg transition-colors\",\n                    isActive\n                      ? \"bg-primary text-primary-foreground\"\n                      : \"hover:bg-muted text-muted-foreground hover:text-foreground\"\n                  )}\n                >\n                  <Icon className=\"w-5 h-5\" />\n                  <span>{item.label}</span>\n                </a>\n              </Link>\n            );\n          })}\n          \n          {/* Logout Button */}\n          <div className=\"mt-auto pt-4 border-t border-border\">\n            <Button\n              variant=\"ghost\"\n              onClick={handleLogout}\n              className=\"w-full justify-start text-muted-foreground hover:text-foreground hover:bg-muted\"\n              data-testid=\"logout-button\"\n            >\n              <LogOut className=\"w-5 h-5 mr-3\" />\n              Logout\n            </Button>\n          </div>\n        </nav>\n      </aside>\n    </>\n  );\n}\n","size_bytes":3461},"client/src/components/modals/message-preview-modal.tsx":{"content":"import {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { type Settlement, type Profile } from \"@shared/schema\";\n\ninterface MessagePreviewModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  settlement: Settlement | null;\n  profile: Profile | null;\n}\n\nexport default function MessagePreviewModal({\n  isOpen,\n  onClose,\n  settlement,\n  profile,\n}: MessagePreviewModalProps) {\n  if (!settlement || !profile) return null;\n\n  const formatDate = (date: Date | null) => {\n    if (!date) return \"Not sent\";\n    return date.toLocaleDateString(\"en-IN\") + \" \" + date.toLocaleTimeString(\"en-IN\", {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md\" data-testid=\"message-preview-modal\">\n        <DialogHeader>\n          <DialogTitle data-testid=\"message-preview-title\">\n            WhatsApp Message\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          <Card className=\"bg-green-50 border-green-200\" data-testid=\"message-card\">\n            <CardContent className=\"p-4\">\n              <div className=\"text-sm font-medium mb-2\" data-testid=\"message-recipient\">\n                Message sent to: {profile.phone}\n              </div>\n              <div className=\"text-sm bg-white p-3 rounded-md border\" data-testid=\"message-content\">\n                {settlement.message.split('\\n').map((line, index) => (\n                  <div key={index}>\n                    {line}\n                    {index < settlement.message.split('\\n').length - 1 && <br />}\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"text-sm text-muted-foreground space-y-1\" data-testid=\"message-details\">\n            <div>Sent: {formatDate(settlement.sentAt)}</div>\n            <div className=\"flex items-center gap-2\">\n              Status: \n              {settlement.status === \"sent\" && (\n                <span className=\"text-green-600\">✅ Delivered</span>\n              )}\n              {settlement.status === \"pending\" && (\n                <span className=\"text-yellow-600\">⏳ Pending</span>\n              )}\n              {settlement.status === \"failed\" && (\n                <span className=\"text-red-600\">❌ Failed</span>\n              )}\n            </div>\n            {settlement.status === \"sent\" && (\n              <div>Read: {formatDate(settlement.sentAt)}</div>\n            )}\n          </div>\n\n          <Button\n            onClick={onClose}\n            className=\"w-full\"\n            data-testid=\"message-preview-close-button\"\n          >\n            Close\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":2912},"client/src/components/modals/profile-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { insertProfileSchema, type InsertProfile, type Profile } from \"@shared/schema\";\n\ninterface ProfileModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (data: InsertProfile) => void;\n  profile?: Profile | null;\n}\n\nexport default function ProfileModal({\n  isOpen,\n  onClose,\n  onSubmit,\n  profile,\n}: ProfileModalProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const isEditing = !!profile;\n\n  const form = useForm<InsertProfile>({\n    resolver: zodResolver(insertProfileSchema),\n    defaultValues: {\n      type: \"uplink\",\n      name: \"\",\n      phone: \"\",\n      email: \"\",\n      ratePerPoint: \"\",\n      commissionPercentage: \"\",\n      notes: \"\",\n    },\n  });\n\n  const watchType = form.watch(\"type\");\n\n  useEffect(() => {\n    if (profile) {\n      form.reset({\n        type: profile.type as \"uplink\" | \"downline\",\n        name: profile.name,\n        phone: profile.phone,\n        email: profile.email || \"\",\n        ratePerPoint: profile.ratePerPoint,\n        commissionPercentage: profile.commissionPercentage || \"\",\n        notes: profile.notes || \"\",\n      });\n    } else {\n      form.reset({\n        type: \"uplink\",\n        name: \"\",\n        phone: \"\",\n        email: \"\",\n        ratePerPoint: \"\",\n        commissionPercentage: \"\",\n        notes: \"\",\n      });\n    }\n  }, [profile, form]);\n\n  const handleSubmit = async (data: InsertProfile) => {\n    setIsSubmitting(true);\n    try {\n      onSubmit(data);\n      onClose();\n    } catch (error) {\n      console.error(\"Error submitting profile:\", error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md\" data-testid=\"profile-modal\">\n        <DialogHeader>\n          <DialogTitle data-testid=\"profile-modal-title\">\n            {isEditing ? \"Edit Profile\" : \"Add Profile\"}\n          </DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"type\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>\n                    Type <span className=\"text-destructive\">*</span>\n                  </FormLabel>\n                  <Select onValueChange={field.onChange} value={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"profile-type-select\">\n                        <SelectValue placeholder=\"Select Type\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"uplink\">Uplink</SelectItem>\n                      <SelectItem value=\"downline\">Downline</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>\n                    Name <span className=\"text-destructive\">*</span>\n                  </FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"Enter profile name\"\n                      {...field}\n                      data-testid=\"profile-name-input\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"phone\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>\n                    Phone Number <span className=\"text-destructive\">*</span>\n                  </FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"+91 9876543210\"\n                      {...field}\n                      data-testid=\"profile-phone-input\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"email\"\n                      placeholder=\"email@example.com\"\n                      {...field}\n                      data-testid=\"profile-email-input\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"ratePerPoint\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>\n                    Rate per Point <span className=\"text-destructive\">*</span>\n                  </FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      step=\"0.01\"\n                      placeholder=\"1.50\"\n                      {...field}\n                      data-testid=\"profile-rate-input\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {watchType === \"downline\" && (\n              <FormField\n                control={form.control}\n                name=\"commissionPercentage\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Commission Percentage</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        min=\"0\"\n                        max=\"100\"\n                        placeholder=\"5.00\"\n                        {...field}\n                        data-testid=\"profile-commission-input\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            )}\n\n            <FormField\n              control={form.control}\n              name=\"notes\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Notes</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      rows={3}\n                      placeholder=\"Optional notes...\"\n                      {...field}\n                      data-testid=\"profile-notes-input\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex space-x-3 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={onClose}\n                className=\"flex-1\"\n                data-testid=\"profile-cancel-button\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={isSubmitting}\n                className=\"flex-1\"\n                data-testid=\"profile-submit-button\"\n              >\n                {isSubmitting ? \"Saving...\" : isEditing ? \"Update Profile\" : \"Save Profile\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":8294},"client/src/components/modals/settlement-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Send } from \"lucide-react\";\nimport { mockProfiles, mockLedgerEntries } from \"@/lib/mock-data\";\n\ninterface SettlementModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (data: any) => void;\n}\n\nexport default function SettlementModal({\n  isOpen,\n  onClose,\n  onSubmit,\n}: SettlementModalProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [selectedProfiles, setSelectedProfiles] = useState<string[]>([]);\n  \n  const form = useForm({\n    defaultValues: {\n      settlementDate: new Date().toISOString().split('T')[0],\n      messageTemplate: `Settlement Report for {period}\n\nBalance: {balance}\nStatus: {status}\n\nThank you for your business.\n- Bookie System`,\n    },\n  });\n\n  const profilesWithBalances = mockProfiles.map(profile => {\n    const ledgerEntry = mockLedgerEntries.find(entry => entry.profileId === profile.id);\n    return {\n      ...profile,\n      balance: ledgerEntry?.balance || \"0.00\",\n    };\n  });\n\n  const handleProfileToggle = (profileId: string) => {\n    setSelectedProfiles(prev => \n      prev.includes(profileId)\n        ? prev.filter(id => id !== profileId)\n        : [...prev, profileId]\n    );\n  };\n\n  const handleSubmit = async (data: any) => {\n    setIsSubmitting(true);\n    try {\n      onSubmit({\n        ...data,\n        selectedProfiles,\n        profileCount: selectedProfiles.length,\n      });\n      onClose();\n    } catch (error) {\n      console.error(\"Error sending settlement:\", error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-lg\" data-testid=\"settlement-modal\">\n        <DialogHeader>\n          <DialogTitle data-testid=\"settlement-modal-title\">\n            Send Settlement\n          </DialogTitle>\n        </DialogHeader>\n\n        <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"settlementDate\">Settlement Date</Label>\n            <Input\n              id=\"settlementDate\"\n              type=\"date\"\n              {...form.register(\"settlementDate\")}\n              data-testid=\"settlement-date-input\"\n            />\n          </div>\n\n          <div>\n            <Label>Profiles to Settle</Label>\n            <div className=\"space-y-2 mt-2\">\n              {profilesWithBalances.map((profile) => (\n                <div key={profile.id} className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id={profile.id}\n                    checked={selectedProfiles.includes(profile.id)}\n                    onCheckedChange={() => handleProfileToggle(profile.id)}\n                    data-testid={`settlement-profile-${profile.id}`}\n                  />\n                  <Label htmlFor={profile.id} className=\"flex-1 cursor-pointer\">\n                    {profile.name} (₹{Math.abs(parseFloat(profile.balance)).toLocaleString(\"en-IN\")})\n                  </Label>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"messageTemplate\">Message Template</Label>\n            <Textarea\n              id=\"messageTemplate\"\n              rows={4}\n              {...form.register(\"messageTemplate\")}\n              data-testid=\"settlement-message-input\"\n            />\n          </div>\n\n          <Card className=\"bg-muted\" data-testid=\"settlement-summary-card\">\n            <CardContent className=\"p-3\">\n              <div className=\"text-sm font-medium mb-2\">Settlement Summary</div>\n              <div className=\"text-sm space-y-1\">\n                <div data-testid=\"settlement-profile-count\">\n                  Profiles: {selectedProfiles.length} selected\n                </div>\n                <div data-testid=\"settlement-message-count\">\n                  Messages: {selectedProfiles.length} to send\n                </div>\n                <div data-testid=\"settlement-period\">\n                  Period: Jan 8-14, 2024\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"flex space-x-3 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={onClose}\n              className=\"flex-1\"\n              data-testid=\"settlement-cancel-button\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={isSubmitting || selectedProfiles.length === 0}\n              className=\"flex-1\"\n              data-testid=\"settlement-submit-button\"\n            >\n              <Send className=\"w-4 h-4 mr-2\" />\n              {isSubmitting ? \"Sending...\" : \"Send Now\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5265},"client/src/components/modals/transaction-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { insertTransactionSchema, type InsertTransaction, type Transaction, type Profile } from \"@shared/schema\";\n\ninterface TransactionModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (data: InsertTransaction) => void;\n  transaction?: Transaction | null;\n}\n\nexport default function TransactionModal({\n  isOpen,\n  onClose,\n  onSubmit,\n  transaction,\n}: TransactionModalProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [totalAmount, setTotalAmount] = useState(\"₹0.00\");\n  const isEditing = !!transaction;\n\n  // Fetch profiles from API\n  const { data: profiles = [], isLoading: profilesLoading } = useQuery<Profile[]>({\n    queryKey: [\"/api/profiles\"],\n  });\n\n  const form = useForm<InsertTransaction>({\n    resolver: zodResolver(insertTransactionSchema),\n    defaultValues: {\n      type: \"taken\",\n      profileId: \"\",\n      date: \"\",\n      points: \"\",\n      ratePerPoint: \"\",\n      commissionPercentage: \"\",\n      notes: \"\",\n    },\n  });\n\n  const watchType = form.watch(\"type\");\n  const watchPoints = form.watch(\"points\");\n  const watchRate = form.watch(\"ratePerPoint\");\n  const watchCommission = form.watch(\"commissionPercentage\");\n\n  // Calculate total amount\n  useEffect(() => {\n    const points = parseFloat(watchPoints) || 0;\n    const rate = parseFloat(watchRate) || 0;\n    const commission = parseFloat(watchCommission) || 0;\n    \n    let total = points * rate;\n    if (watchType === \"given\" && commission > 0) {\n      total = total * (1 + commission / 100);\n    }\n    \n    setTotalAmount(`₹${total.toLocaleString(\"en-IN\", { minimumFractionDigits: 2 })}`);\n  }, [watchPoints, watchRate, watchCommission, watchType]);\n\n  useEffect(() => {\n    if (transaction) {\n      // Handle date as either Date object or string\n      const transactionDate = transaction.date instanceof Date \n        ? transaction.date \n        : new Date(transaction.date);\n      \n      form.reset({\n        type: transaction.type as \"taken\" | \"given\",\n        profileId: transaction.profileId,\n        date: transactionDate.toISOString().split('T')[0],\n        points: transaction.points.toString(),\n        ratePerPoint: transaction.ratePerPoint.toString(),\n        commissionPercentage: transaction.commissionPercentage?.toString() || \"\",\n        notes: transaction.notes || \"\",\n      });\n    } else {\n      form.reset({\n        type: \"taken\",\n        profileId: \"\",\n        date: new Date().toISOString().split('T')[0],\n        points: \"\",\n        ratePerPoint: \"\",\n        commissionPercentage: \"\",\n        notes: \"\",\n      });\n    }\n  }, [transaction, form, profiles]);\n\n  const filteredProfiles = profiles.filter(profile => {\n    if (watchType === \"taken\") return profile.type === \"uplink\";\n    if (watchType === \"given\") return profile.type === \"downline\";\n    return true;\n  });\n\n  const handleSubmit = async (data: InsertTransaction) => {\n    setIsSubmitting(true);\n    try {\n      onSubmit(data);\n      onClose();\n    } catch (error) {\n      console.error(\"Error submitting transaction:\", error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md\" data-testid=\"transaction-modal\">\n        <DialogHeader>\n          <DialogTitle data-testid=\"transaction-modal-title\">\n            {isEditing ? \"Edit Transaction\" : \"Add Transaction\"}\n          </DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"type\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>\n                    Transaction Type <span className=\"text-destructive\">*</span>\n                  </FormLabel>\n                  <Select onValueChange={field.onChange} value={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"transaction-type-select\">\n                        <SelectValue placeholder=\"Select Type\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"taken\">Inventory Taken from Uplink</SelectItem>\n                      <SelectItem value=\"given\">Inventory Given to Downline</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"profileId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>\n                    Profile <span className=\"text-destructive\">*</span>\n                  </FormLabel>\n                  <Select onValueChange={field.onChange} value={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"transaction-profile-select\">\n                        <SelectValue placeholder=\"Select Profile\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {filteredProfiles.map((profile) => (\n                        <SelectItem key={profile.id} value={profile.id}>\n                          {profile.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"date\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>\n                    Date <span className=\"text-destructive\">*</span>\n                  </FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"date\"\n                      {...field}\n                      data-testid=\"transaction-date-input\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"points\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>\n                    Points <span className=\"text-destructive\">*</span>\n                  </FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      min=\"1\"\n                      placeholder=\"10000\"\n                      {...field}\n                      data-testid=\"transaction-points-input\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"ratePerPoint\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>\n                    Rate per Point <span className=\"text-destructive\">*</span>\n                  </FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      step=\"0.01\"\n                      placeholder=\"1.50\"\n                      {...field}\n                      data-testid=\"transaction-rate-input\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {watchType === \"given\" && (\n              <FormField\n                control={form.control}\n                name=\"commissionPercentage\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Commission Percentage</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        min=\"0\"\n                        max=\"100\"\n                        placeholder=\"5.00\"\n                        {...field}\n                        data-testid=\"transaction-commission-input\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            )}\n\n            <FormField\n              control={form.control}\n              name=\"notes\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Notes</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      rows={3}\n                      placeholder=\"Optional notes...\"\n                      {...field}\n                      data-testid=\"transaction-notes-input\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <Card className=\"bg-muted\" data-testid=\"transaction-total-card\">\n              <CardContent className=\"p-3\">\n                <div className=\"text-sm font-medium mb-1\">Total Amount</div>\n                <div className=\"text-xl font-bold text-primary\" data-testid=\"transaction-total-amount\">\n                  {totalAmount}\n                </div>\n                <div className=\"text-xs text-muted-foreground\">Calculated automatically</div>\n              </CardContent>\n            </Card>\n\n            <div className=\"flex space-x-3 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={onClose}\n                className=\"flex-1\"\n                data-testid=\"transaction-cancel-button\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={isSubmitting}\n                className=\"flex-1\"\n                data-testid=\"transaction-submit-button\"\n              >\n                {isSubmitting ? \"Saving...\" : isEditing ? \"Update Transaction\" : \"Save Transaction\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":10993},"client/src/components/modals/user-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { insertUserSchema, type InsertUser, type User } from \"@shared/schema\";\nimport { z } from \"zod\";\n\ninterface UserModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (data: InsertUser) => void;\n  user?: User | null;\n}\n\nexport default function UserModal({\n  isOpen,\n  onClose,\n  onSubmit,\n  user,\n}: UserModalProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const isEditing = !!user;\n\n  // Create dynamic schema based on editing mode\n  const formSchema = isEditing \n    ? insertUserSchema.extend({\n        password: z.string().optional().or(z.literal(\"\")),\n      })\n    : insertUserSchema;\n\n  const form = useForm<InsertUser>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      role: \"assistant\",\n    },\n  });\n\n  useEffect(() => {\n    if (user) {\n      form.reset({\n        username: user.username,\n        email: user.email,\n        password: \"\", // Don't pre-fill password for security\n        role: user.role as \"bookie\" | \"assistant\",\n      });\n    } else {\n      form.reset({\n        username: \"\",\n        email: \"\",\n        password: \"\",\n        role: \"assistant\",\n      });\n    }\n  }, [user, form]);\n\n  const handleSubmit = async (data: InsertUser) => {\n    setIsSubmitting(true);\n    try {\n      // If editing and password is empty, remove it from the data\n      if (isEditing && (!data.password || data.password === \"\")) {\n        const { password, ...dataWithoutPassword } = data;\n        onSubmit(dataWithoutPassword as InsertUser);\n      } else {\n        onSubmit(data);\n      }\n      onClose();\n    } catch (error) {\n      console.error(\"Error submitting user:\", error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md\" data-testid=\"user-modal\">\n        <DialogHeader>\n          <DialogTitle data-testid=\"user-modal-title\">\n            {isEditing ? \"Edit User\" : \"Add User\"}\n          </DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"username\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>\n                    Username <span className=\"text-destructive\">*</span>\n                  </FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"Enter username\"\n                      {...field}\n                      data-testid=\"user-username-input\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>\n                    Email <span className=\"text-destructive\">*</span>\n                  </FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"email\"\n                      placeholder=\"user@example.com\"\n                      {...field}\n                      data-testid=\"user-email-input\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"password\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>\n                    Password <span className=\"text-destructive\">*</span>\n                  </FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"password\"\n                      placeholder={isEditing ? \"Leave blank to keep current password\" : \"Min 8 characters\"}\n                      {...field}\n                      data-testid=\"user-password-input\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"role\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>\n                    Role <span className=\"text-destructive\">*</span>\n                  </FormLabel>\n                  <Select onValueChange={field.onChange} value={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"user-role-select\">\n                        <SelectValue placeholder=\"Select Role\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"bookie\">Bookie (Full Access)</SelectItem>\n                      <SelectItem value=\"assistant\">Assistant (Limited Access)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex space-x-3 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={onClose}\n                className=\"flex-1\"\n                data-testid=\"user-cancel-button\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={isSubmitting}\n                className=\"flex-1\"\n                data-testid=\"user-submit-button\"\n              >\n                {isSubmitting ? \"Saving...\" : isEditing ? \"Update User\" : \"Create User\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":6476},"client/src/components/tables/data-table.tsx":{"content":"import { useState } from \"react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\n\ninterface Column<T> {\n  key: keyof T | string;\n  title: string;\n  render?: (value: any, row: T) => React.ReactNode;\n  align?: \"left\" | \"center\" | \"right\";\n}\n\ninterface DataTableProps<T> {\n  data: T[];\n  columns: Column<T>[];\n  itemsPerPage?: number;\n  testId?: string;\n  loading?: boolean;\n}\n\nexport default function DataTable<T extends { id: string }>({\n  data,\n  columns,\n  itemsPerPage = 10,\n  testId = \"data-table\",\n  loading = false,\n}: DataTableProps<T>) {\n  const [currentPage, setCurrentPage] = useState(1);\n  \n  const totalPages = Math.ceil(data.length / itemsPerPage);\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const endIndex = startIndex + itemsPerPage;\n  const currentData = data.slice(startIndex, endIndex);\n\n  const getCellValue = (row: T, key: string) => {\n    return key.includes('.') \n      ? key.split('.').reduce((obj, k) => obj?.[k], row as any)\n      : (row as any)[key];\n  };\n\n  return (\n    <Card className=\"overflow-hidden\" data-testid={testId}>\n      <div className=\"overflow-x-auto\">\n        <Table>\n          <TableHeader>\n            <TableRow className=\"bg-muted\">\n              {columns.map((column, index) => (\n                <TableHead\n                  key={index}\n                  className={`text-sm font-medium ${\n                    column.align === \"right\" ? \"text-right\" :\n                    column.align === \"center\" ? \"text-center\" : \n                    \"text-left\"\n                  }`}\n                  data-testid={`table-header-${String(column.key)}`}\n                >\n                  {column.title}\n                </TableHead>\n              ))}\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {loading ? (\n              <TableRow>\n                <TableCell colSpan={columns.length} className=\"text-center py-8\">\n                  Loading...\n                </TableCell>\n              </TableRow>\n            ) : currentData.length === 0 ? (\n              <TableRow>\n                <TableCell colSpan={columns.length} className=\"text-center py-8 text-muted-foreground\">\n                  No data available\n                </TableCell>\n              </TableRow>\n            ) : (\n              currentData.map((row) => (\n              <TableRow\n                key={row.id}\n                className=\"border-b border-border/50 hover:bg-muted/50\"\n                data-testid={`table-row-${row.id}`}\n              >\n                {columns.map((column, index) => {\n                  const value = getCellValue(row, String(column.key));\n                  return (\n                    <TableCell\n                      key={index}\n                      className={`py-3 px-4 ${\n                        column.align === \"right\" ? \"text-right\" :\n                        column.align === \"center\" ? \"text-center\" : \n                        \"text-left\"\n                      }`}\n                      data-testid={`table-cell-${row.id}-${String(column.key)}`}\n                    >\n                      {column.render ? column.render(value, row) : value}\n                    </TableCell>\n                  );\n                })}\n              </TableRow>\n            ))\n            )}\n          </TableBody>\n        </Table>\n      </div>\n\n      {/* Pagination */}\n      {totalPages > 1 && (\n        <div className=\"px-4 py-3 bg-muted border-t border-border flex items-center justify-between\">\n          <div className=\"text-sm text-muted-foreground\" data-testid=\"pagination-info\">\n            Showing {startIndex + 1} to {Math.min(endIndex, data.length)} of {data.length} entries\n          </div>\n          <div className=\"flex space-x-1\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n              disabled={currentPage === 1}\n              data-testid=\"pagination-previous\"\n            >\n              Previous\n            </Button>\n            \n            {Array.from({ length: Math.min(totalPages, 5) }, (_, i) => {\n              const page = i + 1;\n              return (\n                <Button\n                  key={page}\n                  variant={currentPage === page ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setCurrentPage(page)}\n                  data-testid={`pagination-page-${page}`}\n                >\n                  {page}\n                </Button>\n              );\n            })}\n            \n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}\n              disabled={currentPage === totalPages}\n              data-testid=\"pagination-next\"\n            >\n              Next\n            </Button>\n          </div>\n        </div>\n      )}\n    </Card>\n  );\n}\n","size_bytes":5082},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}